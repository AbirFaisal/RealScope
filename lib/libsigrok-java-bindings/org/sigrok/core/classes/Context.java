/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sigrok.core.classes;
import org.sigrok.core.interfaces.LogCallback;
/** The global libsigrok context. */
public class Context {
  protected transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Context(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Context obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        classesJNI.delete_Context(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static Context create() {
    long cPtr = classesJNI.Context_create();
    return (cPtr == 0) ? null : new Context(cPtr, true);
  }

  public static String package_version() {
    return classesJNI.Context_package_version();
  }

  public static String lib_version() {
    return classesJNI.Context_lib_version();
  }

  /** Available hardware drivers, indexed by name. */
public java.util.Map<String, Driver> drivers() {
  return (java.util.Map<String, Driver>)classesJNI.Context_drivers(swigCPtr, this);
}

  /** Available input formats, indexed by name. */
public java.util.Map<String, InputFormat> input_formats() {
  return (java.util.Map<String, InputFormat>)classesJNI.Context_input_formats(swigCPtr, this);
}

  /** Lookup the responsible input module for an input file. */
public InputFormat input_format_match(String filename) {
    long cPtr = classesJNI.Context_input_format_match(swigCPtr, this, filename);
    return (cPtr == 0) ? null : new InputFormat(cPtr, true);
  }

  /** Available output formats, indexed by name. */
public java.util.Map<String, OutputFormat> output_formats() {
  return (java.util.Map<String, OutputFormat>)classesJNI.Context_output_formats(swigCPtr, this);
}

  /** Current log level. */
public LogLevel log_level() {
    long cPtr = classesJNI.Context_log_level(swigCPtr, this);
    return (cPtr == 0) ? null : new LogLevel(cPtr, false);
  }

  /** Set the log level.
   * @param level LogLevel to use. */
public void set_log_level(LogLevel level) {
    classesJNI.Context_set_log_level(swigCPtr, this, LogLevel.getCPtr(level), level);
  }

  /** Set the log callback.
   * @param callback Callback of the form callback(LogLevel, string). */
public void set_log_callback(SWIGTYPE_p_functionT_void_fsigrok__LogLevel_const_p_std__stringF_t callback) {
    classesJNI.Context_set_log_callback(swigCPtr, this, SWIGTYPE_p_functionT_void_fsigrok__LogLevel_const_p_std__stringF_t.getCPtr(callback));
  }

  /** Set the log callback to the default handler. */
public void set_log_callback_default() {
    classesJNI.Context_set_log_callback_default(swigCPtr, this);
  }

  /** Install a delegate for reading resource files.
   * @param reader The resource reader delegate, or nullptr to unset. */
public void set_resource_reader(ResourceReader reader) {
    classesJNI.Context_set_resource_reader(swigCPtr, this, ResourceReader.getCPtr(reader), reader);
  }

  /** Create a new session. */
public Session create_session() {
    long cPtr = classesJNI.Context_create_session(swigCPtr, this);
    return (cPtr == 0) ? null : new Session(cPtr, true);
  }

  /** Create a new user device. */
public UserDevice create_user_device(String vendor, String model, String version) {
    long cPtr = classesJNI.Context_create_user_device(swigCPtr, this, vendor, model, version);
    return (cPtr == 0) ? null : new UserDevice(cPtr, true);
  }

  /** Create a header packet. */
public Packet create_header_packet(SWIGTYPE_p_Glib__TimeVal start_time) {
    long cPtr = classesJNI.Context_create_header_packet(swigCPtr, this, SWIGTYPE_p_Glib__TimeVal.getCPtr(start_time));
    return (cPtr == 0) ? null : new Packet(cPtr, true);
  }

  /** Create a logic packet. */
public Packet create_logic_packet(SWIGTYPE_p_void data_pointer, long data_length, long unit_size) {
    long cPtr = classesJNI.Context_create_logic_packet(swigCPtr, this, SWIGTYPE_p_void.getCPtr(data_pointer), data_length, unit_size);
    return (cPtr == 0) ? null : new Packet(cPtr, true);
  }

  /** Load a saved session.
   * @param filename File name string. */
public Session load_session(String filename) {
    long cPtr = classesJNI.Context_load_session(swigCPtr, this, filename);
    return (cPtr == 0) ? null : new Session(cPtr, true);
  }

  /** Create a new trigger.
   * @param name Name string for new trigger. */
public Trigger create_trigger(String name) {
    long cPtr = classesJNI.Context_create_trigger(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Trigger(cPtr, true);
  }

  /** Open an input file.
   * @param filename File name string. */
public Input open_file(String filename) {
    long cPtr = classesJNI.Context_open_file(swigCPtr, this, filename);
    return (cPtr == 0) ? null : new Input(cPtr, true);
  }

  /** Open an input stream based on header data.
   * @param header Initial data from stream. */
public Input open_stream(String header) {
    long cPtr = classesJNI.Context_open_stream(swigCPtr, this, header);
    return (cPtr == 0) ? null : new Input(cPtr, true);
  }

  public java.util.Map<String, String> serials(Driver driver) {
  return (java.util.Map<String, String>)classesJNI.Context_serials(swigCPtr, this, Driver.getCPtr(driver), driver);
}

  public void add_log_callback(LogCallback obj) {
    classesJNI.Context_add_log_callback(swigCPtr, this, obj);
  }

}
