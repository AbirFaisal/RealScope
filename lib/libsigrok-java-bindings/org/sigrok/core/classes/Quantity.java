/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sigrok.core.classes;

/** Measured quantity. */
public class Quantity extends EnumValueQuantity {
  protected transient long swigCPtr;

  protected Quantity(long cPtr, boolean cMemoryOwn) {
    super(classesJNI.Quantity_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Quantity obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        classesJNI.delete_Quantity(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** Duty cycle, e.g. */
  public static final Quantity DUTY_CYCLE = new Quantity(classesJNI.Quantity_DUTY_CYCLE_get(), false);

  /** Continuity test. */
  public static final Quantity CONTINUITY = new Quantity(classesJNI.Quantity_CONTINUITY_get(), false);

  /** Electrical power, usually in W, or dBm. */
  public static final Quantity POWER = new Quantity(classesJNI.Quantity_POWER_get(), false);

  /** Gain (a transistor's gain, or hFE, for example). */
  public static final Quantity GAIN = new Quantity(classesJNI.Quantity_GAIN_get(), false);

  /** Logarithmic representation of sound pressure relative to a reference value. */
  public static final Quantity SOUND_PRESSURE_LEVEL = new Quantity(classesJNI.Quantity_SOUND_PRESSURE_LEVEL_get(), false);

  /** Carbon monoxide level. */
  public static final Quantity CARBON_MONOXIDE = new Quantity(classesJNI.Quantity_CARBON_MONOXIDE_get(), false);

  /** Humidity. */
  public static final Quantity RELATIVE_HUMIDITY = new Quantity(classesJNI.Quantity_RELATIVE_HUMIDITY_get(), false);

  /** Time. */
  public static final Quantity TIME = new Quantity(classesJNI.Quantity_TIME_get(), false);

  /** Wind speed. */
  public static final Quantity WIND_SPEED = new Quantity(classesJNI.Quantity_WIND_SPEED_get(), false);

  /** Pressure. */
  public static final Quantity PRESSURE = new Quantity(classesJNI.Quantity_PRESSURE_get(), false);

  /** Parallel inductance (LCR meter model). */
  public static final Quantity PARALLEL_INDUCTANCE = new Quantity(classesJNI.Quantity_PARALLEL_INDUCTANCE_get(), false);

  /** Parallel capacitance (LCR meter model). */
  public static final Quantity PARALLEL_CAPACITANCE = new Quantity(classesJNI.Quantity_PARALLEL_CAPACITANCE_get(), false);

  /** Parallel resistance (LCR meter model). */
  public static final Quantity PARALLEL_RESISTANCE = new Quantity(classesJNI.Quantity_PARALLEL_RESISTANCE_get(), false);

  /** Series inductance (LCR meter model). */
  public static final Quantity SERIES_INDUCTANCE = new Quantity(classesJNI.Quantity_SERIES_INDUCTANCE_get(), false);

  /** Series capacitance (LCR meter model). */
  public static final Quantity SERIES_CAPACITANCE = new Quantity(classesJNI.Quantity_SERIES_CAPACITANCE_get(), false);

  /** Series resistance (LCR meter model). */
  public static final Quantity SERIES_RESISTANCE = new Quantity(classesJNI.Quantity_SERIES_RESISTANCE_get(), false);

  /** Dissipation factor. */
  public static final Quantity DISSIPATION_FACTOR = new Quantity(classesJNI.Quantity_DISSIPATION_FACTOR_get(), false);

  /** Quality factor. */
  public static final Quantity QUALITY_FACTOR = new Quantity(classesJNI.Quantity_QUALITY_FACTOR_get(), false);

  /** Phase angle. */
  public static final Quantity PHASE_ANGLE = new Quantity(classesJNI.Quantity_PHASE_ANGLE_get(), false);

  /** Difference from reference value. */
  public static final Quantity DIFFERENCE = new Quantity(classesJNI.Quantity_DIFFERENCE_get(), false);

  /** Count. */
  public static final Quantity COUNT = new Quantity(classesJNI.Quantity_COUNT_get(), false);

  /** Power factor. */
  public static final Quantity POWER_FACTOR = new Quantity(classesJNI.Quantity_POWER_FACTOR_get(), false);

  /** Apparent power. */
  public static final Quantity APPARENT_POWER = new Quantity(classesJNI.Quantity_APPARENT_POWER_get(), false);

  /** Mass. */
  public static final Quantity MASS = new Quantity(classesJNI.Quantity_MASS_get(), false);

  /** Harmonic ratio. */
  public static final Quantity HARMONIC_RATIO = new Quantity(classesJNI.Quantity_HARMONIC_RATIO_get(), false);


  public static Quantity getVOLTAGE() {
    long cPtr = classesJNI.Quantity_VOLTAGE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getCURRENT() {
    long cPtr = classesJNI.Quantity_CURRENT_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getRESISTANCE() {
    long cPtr = classesJNI.Quantity_RESISTANCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getCAPACITANCE() {
    long cPtr = classesJNI.Quantity_CAPACITANCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getTEMPERATURE() {
    long cPtr = classesJNI.Quantity_TEMPERATURE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getFREQUENCY() {
    long cPtr = classesJNI.Quantity_FREQUENCY_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getDUTY_CYCLE() {
    long cPtr = classesJNI.Quantity_DUTY_CYCLE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getCONTINUITY() {
    long cPtr = classesJNI.Quantity_CONTINUITY_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getPULSE_WIDTH() {
    long cPtr = classesJNI.Quantity_PULSE_WIDTH_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getCONDUCTANCE() {
    long cPtr = classesJNI.Quantity_CONDUCTANCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getPOWER() {
    long cPtr = classesJNI.Quantity_POWER_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getGAIN() {
    long cPtr = classesJNI.Quantity_GAIN_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getSOUND_PRESSURE_LEVEL() {
    long cPtr = classesJNI.Quantity_SOUND_PRESSURE_LEVEL_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getCARBON_MONOXIDE() {
    long cPtr = classesJNI.Quantity_CARBON_MONOXIDE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getRELATIVE_HUMIDITY() {
    long cPtr = classesJNI.Quantity_RELATIVE_HUMIDITY_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getTIME() {
    long cPtr = classesJNI.Quantity_TIME_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getWIND_SPEED() {
    long cPtr = classesJNI.Quantity_WIND_SPEED_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getPRESSURE() {
    long cPtr = classesJNI.Quantity_PRESSURE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getPARALLEL_INDUCTANCE() {
    long cPtr = classesJNI.Quantity_PARALLEL_INDUCTANCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getPARALLEL_CAPACITANCE() {
    long cPtr = classesJNI.Quantity_PARALLEL_CAPACITANCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getPARALLEL_RESISTANCE() {
    long cPtr = classesJNI.Quantity_PARALLEL_RESISTANCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getSERIES_INDUCTANCE() {
    long cPtr = classesJNI.Quantity_SERIES_INDUCTANCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getSERIES_CAPACITANCE() {
    long cPtr = classesJNI.Quantity_SERIES_CAPACITANCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getSERIES_RESISTANCE() {
    long cPtr = classesJNI.Quantity_SERIES_RESISTANCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getDISSIPATION_FACTOR() {
    long cPtr = classesJNI.Quantity_DISSIPATION_FACTOR_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getQUALITY_FACTOR() {
    long cPtr = classesJNI.Quantity_QUALITY_FACTOR_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getPHASE_ANGLE() {
    long cPtr = classesJNI.Quantity_PHASE_ANGLE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getDIFFERENCE() {
    long cPtr = classesJNI.Quantity_DIFFERENCE_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getCOUNT() {
    long cPtr = classesJNI.Quantity_COUNT_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getPOWER_FACTOR() {
    long cPtr = classesJNI.Quantity_POWER_FACTOR_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getAPPARENT_POWER() {
    long cPtr = classesJNI.Quantity_APPARENT_POWER_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getMASS() {
    long cPtr = classesJNI.Quantity_MASS_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

  public static Quantity getHARMONIC_RATIO() {
    long cPtr = classesJNI.Quantity_HARMONIC_RATIO_get();
    return (cPtr == 0) ? null : new Quantity(cPtr, false);
  }

}
