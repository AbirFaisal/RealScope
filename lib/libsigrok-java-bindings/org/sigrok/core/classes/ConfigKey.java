/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sigrok.core.classes;

/** Configuration key. */
public class ConfigKey extends EnumValueConfigKey {
  protected transient long swigCPtr;

  protected ConfigKey(long cPtr, boolean cMemoryOwn) {
    super(classesJNI.ConfigKey_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ConfigKey obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        classesJNI.delete_ConfigKey(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** The device can act as logic analyzer. */
  public static final ConfigKey LOGIC_ANALYZER = new ConfigKey(classesJNI.ConfigKey_LOGIC_ANALYZER_get(), false);

  /** The device can act as an oscilloscope. */
  public static final ConfigKey OSCILLOSCOPE = new ConfigKey(classesJNI.ConfigKey_OSCILLOSCOPE_get(), false);

  /** The device can act as a multimeter. */
  public static final ConfigKey MULTIMETER = new ConfigKey(classesJNI.ConfigKey_MULTIMETER_get(), false);

  /** The device is a demo device. */
  public static final ConfigKey DEMO_DEV = new ConfigKey(classesJNI.ConfigKey_DEMO_DEV_get(), false);

  /** The device can act as a sound level meter. */
  public static final ConfigKey SOUNDLEVELMETER = new ConfigKey(classesJNI.ConfigKey_SOUNDLEVELMETER_get(), false);

  /** The device can measure temperature. */
  public static final ConfigKey THERMOMETER = new ConfigKey(classesJNI.ConfigKey_THERMOMETER_get(), false);

  /** The device can measure humidity. */
  public static final ConfigKey HYGROMETER = new ConfigKey(classesJNI.ConfigKey_HYGROMETER_get(), false);

  /** The device can measure energy consumption. */
  public static final ConfigKey ENERGYMETER = new ConfigKey(classesJNI.ConfigKey_ENERGYMETER_get(), false);

  /** The device can act as a signal demodulator. */
  public static final ConfigKey DEMODULATOR = new ConfigKey(classesJNI.ConfigKey_DEMODULATOR_get(), false);

  /** The device can act as a programmable power supply. */
  public static final ConfigKey POWER_SUPPLY = new ConfigKey(classesJNI.ConfigKey_POWER_SUPPLY_get(), false);

  /** The device can act as an LCR meter. */
  public static final ConfigKey LCRMETER = new ConfigKey(classesJNI.ConfigKey_LCRMETER_get(), false);

  /** The device can act as an electronic load. */
  public static final ConfigKey ELECTRONIC_LOAD = new ConfigKey(classesJNI.ConfigKey_ELECTRONIC_LOAD_get(), false);

  /** The device can act as a scale. */
  public static final ConfigKey SCALE = new ConfigKey(classesJNI.ConfigKey_SCALE_get(), false);

  /** The device can act as a function generator. */
  public static final ConfigKey SIGNAL_GENERATOR = new ConfigKey(classesJNI.ConfigKey_SIGNAL_GENERATOR_get(), false);

  /** The device can measure power. */
  public static final ConfigKey POWERMETER = new ConfigKey(classesJNI.ConfigKey_POWERMETER_get(), false);

  /** Specification on how to connect to a device. */
  public static final ConfigKey CONN = new ConfigKey(classesJNI.ConfigKey_CONN_get(), false);

  /** Serial communication specification, in the form: */
  public static final ConfigKey SERIALCOMM = new ConfigKey(classesJNI.ConfigKey_SERIALCOMM_get(), false);

  /** Modbus slave address specification. */
  public static final ConfigKey MODBUSADDR = new ConfigKey(classesJNI.ConfigKey_MODBUSADDR_get(), false);

  /** The device supports setting its samplerate, in Hz. */
  public static final ConfigKey SAMPLERATE = new ConfigKey(classesJNI.ConfigKey_SAMPLERATE_get(), false);

  /** The device supports setting a pre/post-trigger capture ratio. */
  public static final ConfigKey CAPTURE_RATIO = new ConfigKey(classesJNI.ConfigKey_CAPTURE_RATIO_get(), false);

  /** The device supports setting a pattern (pattern generator mode). */
  public static final ConfigKey PATTERN_MODE = new ConfigKey(classesJNI.ConfigKey_PATTERN_MODE_get(), false);

  /** The device supports run-length encoding (RLE). */
  public static final ConfigKey RLE = new ConfigKey(classesJNI.ConfigKey_RLE_get(), false);

  /** The device supports setting trigger slope. */
  public static final ConfigKey TRIGGER_SLOPE = new ConfigKey(classesJNI.ConfigKey_TRIGGER_SLOPE_get(), false);

  /** The device supports averaging. */
  public static final ConfigKey AVERAGING = new ConfigKey(classesJNI.ConfigKey_AVERAGING_get(), false);

  /** The device supports setting number of samples to be averaged over. */
  public static final ConfigKey AVG_SAMPLES = new ConfigKey(classesJNI.ConfigKey_AVG_SAMPLES_get(), false);

  /** Trigger source. */
  public static final ConfigKey TRIGGER_SOURCE = new ConfigKey(classesJNI.ConfigKey_TRIGGER_SOURCE_get(), false);

  /** Horizontal trigger position. */
  public static final ConfigKey HORIZ_TRIGGERPOS = new ConfigKey(classesJNI.ConfigKey_HORIZ_TRIGGERPOS_get(), false);

  /** Buffer size. */
  public static final ConfigKey BUFFERSIZE = new ConfigKey(classesJNI.ConfigKey_BUFFERSIZE_get(), false);

  /** Time base. */
  public static final ConfigKey TIMEBASE = new ConfigKey(classesJNI.ConfigKey_TIMEBASE_get(), false);

  /** Filter. */
  public static final ConfigKey FILTER = new ConfigKey(classesJNI.ConfigKey_FILTER_get(), false);

  /** Volts/div. */
  public static final ConfigKey VDIV = new ConfigKey(classesJNI.ConfigKey_VDIV_get(), false);

  /** Coupling. */
  public static final ConfigKey COUPLING = new ConfigKey(classesJNI.ConfigKey_COUPLING_get(), false);

  /** Trigger matches. */
  public static final ConfigKey TRIGGER_MATCH = new ConfigKey(classesJNI.ConfigKey_TRIGGER_MATCH_get(), false);

  /** The device supports setting its sample interval, in ms. */
  public static final ConfigKey SAMPLE_INTERVAL = new ConfigKey(classesJNI.ConfigKey_SAMPLE_INTERVAL_get(), false);

  /** Number of horizontal divisions, as related to SR_CONF_TIMEBASE. */
  public static final ConfigKey NUM_HDIV = new ConfigKey(classesJNI.ConfigKey_NUM_HDIV_get(), false);

  /** Number of vertical divisions, as related to SR_CONF_VDIV. */
  public static final ConfigKey NUM_VDIV = new ConfigKey(classesJNI.ConfigKey_NUM_VDIV_get(), false);

  /** Sound pressure level frequency weighting. */
  public static final ConfigKey SPL_WEIGHT_FREQ = new ConfigKey(classesJNI.ConfigKey_SPL_WEIGHT_FREQ_get(), false);

  /** Sound pressure level time weighting. */
  public static final ConfigKey SPL_WEIGHT_TIME = new ConfigKey(classesJNI.ConfigKey_SPL_WEIGHT_TIME_get(), false);

  /** Sound pressure level measurement range. */
  public static final ConfigKey SPL_MEASUREMENT_RANGE = new ConfigKey(classesJNI.ConfigKey_SPL_MEASUREMENT_RANGE_get(), false);

  /** Max hold mode. */
  public static final ConfigKey HOLD_MAX = new ConfigKey(classesJNI.ConfigKey_HOLD_MAX_get(), false);

  /** Min hold mode. */
  public static final ConfigKey HOLD_MIN = new ConfigKey(classesJNI.ConfigKey_HOLD_MIN_get(), false);

  /** Logic low-high threshold range. */
  public static final ConfigKey VOLTAGE_THRESHOLD = new ConfigKey(classesJNI.ConfigKey_VOLTAGE_THRESHOLD_get(), false);

  /** The device supports using an external clock. */
  public static final ConfigKey EXTERNAL_CLOCK = new ConfigKey(classesJNI.ConfigKey_EXTERNAL_CLOCK_get(), false);

  /** The device supports swapping channels. */
  public static final ConfigKey SWAP = new ConfigKey(classesJNI.ConfigKey_SWAP_get(), false);

  /** Center frequency. */
  public static final ConfigKey CENTER_FREQUENCY = new ConfigKey(classesJNI.ConfigKey_CENTER_FREQUENCY_get(), false);

  /** The device supports setting the number of logic channels. */
  public static final ConfigKey NUM_LOGIC_CHANNELS = new ConfigKey(classesJNI.ConfigKey_NUM_LOGIC_CHANNELS_get(), false);

  /** The device supports setting the number of analog channels. */
  public static final ConfigKey NUM_ANALOG_CHANNELS = new ConfigKey(classesJNI.ConfigKey_NUM_ANALOG_CHANNELS_get(), false);

  /** Current voltage. */
  public static final ConfigKey VOLTAGE = new ConfigKey(classesJNI.ConfigKey_VOLTAGE_get(), false);

  /** Maximum target voltage. */
  public static final ConfigKey VOLTAGE_TARGET = new ConfigKey(classesJNI.ConfigKey_VOLTAGE_TARGET_get(), false);

  /** Current current. */
  public static final ConfigKey CURRENT = new ConfigKey(classesJNI.ConfigKey_CURRENT_get(), false);

  /** Current limit. */
  public static final ConfigKey CURRENT_LIMIT = new ConfigKey(classesJNI.ConfigKey_CURRENT_LIMIT_get(), false);

  /** Enabling/disabling channel. */
  public static final ConfigKey ENABLED = new ConfigKey(classesJNI.ConfigKey_ENABLED_get(), false);

  /** Channel configuration. */
  public static final ConfigKey CHANNEL_CONFIG = new ConfigKey(classesJNI.ConfigKey_CHANNEL_CONFIG_get(), false);

  /** Over-voltage protection (OVP) feature. */
  public static final ConfigKey OVER_VOLTAGE_PROTECTION_ENABLED = new ConfigKey(classesJNI.ConfigKey_OVER_VOLTAGE_PROTECTION_ENABLED_get(), false);

  /** Over-voltage protection (OVP) active. */
  public static final ConfigKey OVER_VOLTAGE_PROTECTION_ACTIVE = new ConfigKey(classesJNI.ConfigKey_OVER_VOLTAGE_PROTECTION_ACTIVE_get(), false);

  /** Over-voltage protection (OVP) threshold. */
  public static final ConfigKey OVER_VOLTAGE_PROTECTION_THRESHOLD = new ConfigKey(classesJNI.ConfigKey_OVER_VOLTAGE_PROTECTION_THRESHOLD_get(), false);

  /** Over-current protection (OCP) feature. */
  public static final ConfigKey OVER_CURRENT_PROTECTION_ENABLED = new ConfigKey(classesJNI.ConfigKey_OVER_CURRENT_PROTECTION_ENABLED_get(), false);

  /** Over-current protection (OCP) active. */
  public static final ConfigKey OVER_CURRENT_PROTECTION_ACTIVE = new ConfigKey(classesJNI.ConfigKey_OVER_CURRENT_PROTECTION_ACTIVE_get(), false);

  /** Over-current protection (OCP) threshold. */
  public static final ConfigKey OVER_CURRENT_PROTECTION_THRESHOLD = new ConfigKey(classesJNI.ConfigKey_OVER_CURRENT_PROTECTION_THRESHOLD_get(), false);

  /** Choice of clock edge for external clock (\"r\" or \"f\"). */
  public static final ConfigKey CLOCK_EDGE = new ConfigKey(classesJNI.ConfigKey_CLOCK_EDGE_get(), false);

  /** Amplitude of a source without strictly-defined MQ. */
  public static final ConfigKey AMPLITUDE = new ConfigKey(classesJNI.ConfigKey_AMPLITUDE_get(), false);

  /** Channel regulation get: \"CV\", \"CC\" or \"UR\", denoting constant voltage, constant current or unregulated. */
  public static final ConfigKey REGULATION = new ConfigKey(classesJNI.ConfigKey_REGULATION_get(), false);

  /** Over-temperature protection (OTP) */
  public static final ConfigKey OVER_TEMPERATURE_PROTECTION = new ConfigKey(classesJNI.ConfigKey_OVER_TEMPERATURE_PROTECTION_get(), false);

  /** Output frequency in Hz. */
  public static final ConfigKey OUTPUT_FREQUENCY = new ConfigKey(classesJNI.ConfigKey_OUTPUT_FREQUENCY_get(), false);

  /** Output frequency target in Hz. */
  public static final ConfigKey OUTPUT_FREQUENCY_TARGET = new ConfigKey(classesJNI.ConfigKey_OUTPUT_FREQUENCY_TARGET_get(), false);

  /** Measured quantity. */
  public static final ConfigKey MEASURED_QUANTITY = new ConfigKey(classesJNI.ConfigKey_MEASURED_QUANTITY_get(), false);

  /** Equivalent circuit model. */
  public static final ConfigKey EQUIV_CIRCUIT_MODEL = new ConfigKey(classesJNI.ConfigKey_EQUIV_CIRCUIT_MODEL_get(), false);

  /** Over-temperature protection (OTP) active. */
  public static final ConfigKey OVER_TEMPERATURE_PROTECTION_ACTIVE = new ConfigKey(classesJNI.ConfigKey_OVER_TEMPERATURE_PROTECTION_ACTIVE_get(), false);

  /** Under-voltage condition. */
  public static final ConfigKey UNDER_VOLTAGE_CONDITION = new ConfigKey(classesJNI.ConfigKey_UNDER_VOLTAGE_CONDITION_get(), false);

  /** Under-voltage condition active. */
  public static final ConfigKey UNDER_VOLTAGE_CONDITION_ACTIVE = new ConfigKey(classesJNI.ConfigKey_UNDER_VOLTAGE_CONDITION_ACTIVE_get(), false);

  /** Trigger level. */
  public static final ConfigKey TRIGGER_LEVEL = new ConfigKey(classesJNI.ConfigKey_TRIGGER_LEVEL_get(), false);

  /** Under-voltage condition threshold. */
  public static final ConfigKey UNDER_VOLTAGE_CONDITION_THRESHOLD = new ConfigKey(classesJNI.ConfigKey_UNDER_VOLTAGE_CONDITION_THRESHOLD_get(), false);

  /** Which external clock source to use if the device supports multiple external clock channels. */
  public static final ConfigKey EXTERNAL_CLOCK_SOURCE = new ConfigKey(classesJNI.ConfigKey_EXTERNAL_CLOCK_SOURCE_get(), false);

  /** Session filename. */
  public static final ConfigKey SESSIONFILE = new ConfigKey(classesJNI.ConfigKey_SESSIONFILE_get(), false);

  /** The device supports specifying a capturefile to inject. */
  public static final ConfigKey CAPTUREFILE = new ConfigKey(classesJNI.ConfigKey_CAPTUREFILE_get(), false);

  /** The device supports specifying the capturefile unit size. */
  public static final ConfigKey CAPTURE_UNITSIZE = new ConfigKey(classesJNI.ConfigKey_CAPTURE_UNITSIZE_get(), false);

  /** Power off the device. */
  public static final ConfigKey POWER_OFF = new ConfigKey(classesJNI.ConfigKey_POWER_OFF_get(), false);

  /** Data source for acquisition. */
  public static final ConfigKey DATA_SOURCE = new ConfigKey(classesJNI.ConfigKey_DATA_SOURCE_get(), false);

  /** The device supports setting a probe factor. */
  public static final ConfigKey PROBE_FACTOR = new ConfigKey(classesJNI.ConfigKey_PROBE_FACTOR_get(), false);

  /** Number of powerline cycles for ADC integration time. */
  public static final ConfigKey ADC_POWERLINE_CYCLES = new ConfigKey(classesJNI.ConfigKey_ADC_POWERLINE_CYCLES_get(), false);

  /** The device supports setting a sample time limit (how long the sample acquisition should run, in ms). */
  public static final ConfigKey LIMIT_MSEC = new ConfigKey(classesJNI.ConfigKey_LIMIT_MSEC_get(), false);

  /** The device supports setting a sample number limit (how many samples should be acquired). */
  public static final ConfigKey LIMIT_SAMPLES = new ConfigKey(classesJNI.ConfigKey_LIMIT_SAMPLES_get(), false);

  /** The device supports setting a frame limit (how many frames should be acquired). */
  public static final ConfigKey LIMIT_FRAMES = new ConfigKey(classesJNI.ConfigKey_LIMIT_FRAMES_get(), false);

  /** The device supports continuous sampling. */
  public static final ConfigKey CONTINUOUS = new ConfigKey(classesJNI.ConfigKey_CONTINUOUS_get(), false);

  /** The device has internal storage, into which data is logged. */
  public static final ConfigKey DATALOG = new ConfigKey(classesJNI.ConfigKey_DATALOG_get(), false);

  /** Device mode for multi-function devices. */
  public static final ConfigKey DEVICE_MODE = new ConfigKey(classesJNI.ConfigKey_DEVICE_MODE_get(), false);

  /** Self test mode. */
  public static final ConfigKey TEST_MODE = new ConfigKey(classesJNI.ConfigKey_TEST_MODE_get(), false);


  public static ConfigKey getLOGIC_ANALYZER() {
    long cPtr = classesJNI.ConfigKey_LOGIC_ANALYZER_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOSCILLOSCOPE() {
    long cPtr = classesJNI.ConfigKey_OSCILLOSCOPE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getMULTIMETER() {
    long cPtr = classesJNI.ConfigKey_MULTIMETER_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getDEMO_DEV() {
    long cPtr = classesJNI.ConfigKey_DEMO_DEV_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSOUNDLEVELMETER() {
    long cPtr = classesJNI.ConfigKey_SOUNDLEVELMETER_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getTHERMOMETER() {
    long cPtr = classesJNI.ConfigKey_THERMOMETER_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getHYGROMETER() {
    long cPtr = classesJNI.ConfigKey_HYGROMETER_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getENERGYMETER() {
    long cPtr = classesJNI.ConfigKey_ENERGYMETER_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getDEMODULATOR() {
    long cPtr = classesJNI.ConfigKey_DEMODULATOR_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getPOWER_SUPPLY() {
    long cPtr = classesJNI.ConfigKey_POWER_SUPPLY_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getLCRMETER() {
    long cPtr = classesJNI.ConfigKey_LCRMETER_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getELECTRONIC_LOAD() {
    long cPtr = classesJNI.ConfigKey_ELECTRONIC_LOAD_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSCALE() {
    long cPtr = classesJNI.ConfigKey_SCALE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSIGNAL_GENERATOR() {
    long cPtr = classesJNI.ConfigKey_SIGNAL_GENERATOR_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getPOWERMETER() {
    long cPtr = classesJNI.ConfigKey_POWERMETER_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCONN() {
    long cPtr = classesJNI.ConfigKey_CONN_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSERIALCOMM() {
    long cPtr = classesJNI.ConfigKey_SERIALCOMM_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getMODBUSADDR() {
    long cPtr = classesJNI.ConfigKey_MODBUSADDR_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSAMPLERATE() {
    long cPtr = classesJNI.ConfigKey_SAMPLERATE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCAPTURE_RATIO() {
    long cPtr = classesJNI.ConfigKey_CAPTURE_RATIO_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getPATTERN_MODE() {
    long cPtr = classesJNI.ConfigKey_PATTERN_MODE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getRLE() {
    long cPtr = classesJNI.ConfigKey_RLE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getTRIGGER_SLOPE() {
    long cPtr = classesJNI.ConfigKey_TRIGGER_SLOPE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getAVERAGING() {
    long cPtr = classesJNI.ConfigKey_AVERAGING_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getAVG_SAMPLES() {
    long cPtr = classesJNI.ConfigKey_AVG_SAMPLES_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getTRIGGER_SOURCE() {
    long cPtr = classesJNI.ConfigKey_TRIGGER_SOURCE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getHORIZ_TRIGGERPOS() {
    long cPtr = classesJNI.ConfigKey_HORIZ_TRIGGERPOS_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getBUFFERSIZE() {
    long cPtr = classesJNI.ConfigKey_BUFFERSIZE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getTIMEBASE() {
    long cPtr = classesJNI.ConfigKey_TIMEBASE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getFILTER() {
    long cPtr = classesJNI.ConfigKey_FILTER_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getVDIV() {
    long cPtr = classesJNI.ConfigKey_VDIV_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCOUPLING() {
    long cPtr = classesJNI.ConfigKey_COUPLING_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getTRIGGER_MATCH() {
    long cPtr = classesJNI.ConfigKey_TRIGGER_MATCH_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSAMPLE_INTERVAL() {
    long cPtr = classesJNI.ConfigKey_SAMPLE_INTERVAL_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getNUM_HDIV() {
    long cPtr = classesJNI.ConfigKey_NUM_HDIV_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getNUM_VDIV() {
    long cPtr = classesJNI.ConfigKey_NUM_VDIV_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSPL_WEIGHT_FREQ() {
    long cPtr = classesJNI.ConfigKey_SPL_WEIGHT_FREQ_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSPL_WEIGHT_TIME() {
    long cPtr = classesJNI.ConfigKey_SPL_WEIGHT_TIME_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSPL_MEASUREMENT_RANGE() {
    long cPtr = classesJNI.ConfigKey_SPL_MEASUREMENT_RANGE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getHOLD_MAX() {
    long cPtr = classesJNI.ConfigKey_HOLD_MAX_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getHOLD_MIN() {
    long cPtr = classesJNI.ConfigKey_HOLD_MIN_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getVOLTAGE_THRESHOLD() {
    long cPtr = classesJNI.ConfigKey_VOLTAGE_THRESHOLD_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getEXTERNAL_CLOCK() {
    long cPtr = classesJNI.ConfigKey_EXTERNAL_CLOCK_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSWAP() {
    long cPtr = classesJNI.ConfigKey_SWAP_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCENTER_FREQUENCY() {
    long cPtr = classesJNI.ConfigKey_CENTER_FREQUENCY_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getNUM_LOGIC_CHANNELS() {
    long cPtr = classesJNI.ConfigKey_NUM_LOGIC_CHANNELS_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getNUM_ANALOG_CHANNELS() {
    long cPtr = classesJNI.ConfigKey_NUM_ANALOG_CHANNELS_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getVOLTAGE() {
    long cPtr = classesJNI.ConfigKey_VOLTAGE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getVOLTAGE_TARGET() {
    long cPtr = classesJNI.ConfigKey_VOLTAGE_TARGET_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCURRENT() {
    long cPtr = classesJNI.ConfigKey_CURRENT_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCURRENT_LIMIT() {
    long cPtr = classesJNI.ConfigKey_CURRENT_LIMIT_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getENABLED() {
    long cPtr = classesJNI.ConfigKey_ENABLED_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCHANNEL_CONFIG() {
    long cPtr = classesJNI.ConfigKey_CHANNEL_CONFIG_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOVER_VOLTAGE_PROTECTION_ENABLED() {
    long cPtr = classesJNI.ConfigKey_OVER_VOLTAGE_PROTECTION_ENABLED_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOVER_VOLTAGE_PROTECTION_ACTIVE() {
    long cPtr = classesJNI.ConfigKey_OVER_VOLTAGE_PROTECTION_ACTIVE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOVER_VOLTAGE_PROTECTION_THRESHOLD() {
    long cPtr = classesJNI.ConfigKey_OVER_VOLTAGE_PROTECTION_THRESHOLD_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOVER_CURRENT_PROTECTION_ENABLED() {
    long cPtr = classesJNI.ConfigKey_OVER_CURRENT_PROTECTION_ENABLED_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOVER_CURRENT_PROTECTION_ACTIVE() {
    long cPtr = classesJNI.ConfigKey_OVER_CURRENT_PROTECTION_ACTIVE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOVER_CURRENT_PROTECTION_THRESHOLD() {
    long cPtr = classesJNI.ConfigKey_OVER_CURRENT_PROTECTION_THRESHOLD_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCLOCK_EDGE() {
    long cPtr = classesJNI.ConfigKey_CLOCK_EDGE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getAMPLITUDE() {
    long cPtr = classesJNI.ConfigKey_AMPLITUDE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getREGULATION() {
    long cPtr = classesJNI.ConfigKey_REGULATION_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOVER_TEMPERATURE_PROTECTION() {
    long cPtr = classesJNI.ConfigKey_OVER_TEMPERATURE_PROTECTION_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOUTPUT_FREQUENCY() {
    long cPtr = classesJNI.ConfigKey_OUTPUT_FREQUENCY_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOUTPUT_FREQUENCY_TARGET() {
    long cPtr = classesJNI.ConfigKey_OUTPUT_FREQUENCY_TARGET_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getMEASURED_QUANTITY() {
    long cPtr = classesJNI.ConfigKey_MEASURED_QUANTITY_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getEQUIV_CIRCUIT_MODEL() {
    long cPtr = classesJNI.ConfigKey_EQUIV_CIRCUIT_MODEL_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getOVER_TEMPERATURE_PROTECTION_ACTIVE() {
    long cPtr = classesJNI.ConfigKey_OVER_TEMPERATURE_PROTECTION_ACTIVE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getUNDER_VOLTAGE_CONDITION() {
    long cPtr = classesJNI.ConfigKey_UNDER_VOLTAGE_CONDITION_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getUNDER_VOLTAGE_CONDITION_ACTIVE() {
    long cPtr = classesJNI.ConfigKey_UNDER_VOLTAGE_CONDITION_ACTIVE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getTRIGGER_LEVEL() {
    long cPtr = classesJNI.ConfigKey_TRIGGER_LEVEL_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getUNDER_VOLTAGE_CONDITION_THRESHOLD() {
    long cPtr = classesJNI.ConfigKey_UNDER_VOLTAGE_CONDITION_THRESHOLD_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getEXTERNAL_CLOCK_SOURCE() {
    long cPtr = classesJNI.ConfigKey_EXTERNAL_CLOCK_SOURCE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getSESSIONFILE() {
    long cPtr = classesJNI.ConfigKey_SESSIONFILE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCAPTUREFILE() {
    long cPtr = classesJNI.ConfigKey_CAPTUREFILE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCAPTURE_UNITSIZE() {
    long cPtr = classesJNI.ConfigKey_CAPTURE_UNITSIZE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getPOWER_OFF() {
    long cPtr = classesJNI.ConfigKey_POWER_OFF_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getDATA_SOURCE() {
    long cPtr = classesJNI.ConfigKey_DATA_SOURCE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getPROBE_FACTOR() {
    long cPtr = classesJNI.ConfigKey_PROBE_FACTOR_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getADC_POWERLINE_CYCLES() {
    long cPtr = classesJNI.ConfigKey_ADC_POWERLINE_CYCLES_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getLIMIT_MSEC() {
    long cPtr = classesJNI.ConfigKey_LIMIT_MSEC_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getLIMIT_SAMPLES() {
    long cPtr = classesJNI.ConfigKey_LIMIT_SAMPLES_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getLIMIT_FRAMES() {
    long cPtr = classesJNI.ConfigKey_LIMIT_FRAMES_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getCONTINUOUS() {
    long cPtr = classesJNI.ConfigKey_CONTINUOUS_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getDATALOG() {
    long cPtr = classesJNI.ConfigKey_DATALOG_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getDEVICE_MODE() {
    long cPtr = classesJNI.ConfigKey_DEVICE_MODE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static ConfigKey getTEST_MODE() {
    long cPtr = classesJNI.ConfigKey_TEST_MODE_get();
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  /** Data type used for this configuration key. */
public DataType data_type() {
    long cPtr = classesJNI.ConfigKey_data_type(swigCPtr, this);
    return (cPtr == 0) ? null : new DataType(cPtr, false);
  }

  /** String identifier for this configuration key, suitable for CLI use. */
public String identifier() {
    return classesJNI.ConfigKey_identifier(swigCPtr, this);
  }

  /** Description of this configuration key. */
public String description() {
    return classesJNI.ConfigKey_description(swigCPtr, this);
  }

  public static ConfigKey get_by_identifier(String identifier) {
    long cPtr = classesJNI.ConfigKey_get_by_identifier(identifier);
    return (cPtr == 0) ? null : new ConfigKey(cPtr, false);
  }

  public static Variant parse_string(String value, SWIGTYPE_sr_datatype dt) {
    return new Variant(classesJNI.ConfigKey_parse_string__SWIG_0(value, dt.swigValue()), true);
  }

  public Variant parse_string(String value) {
    return new Variant(classesJNI.ConfigKey_parse_string__SWIG_1(swigCPtr, this, value), true);
  }

}
