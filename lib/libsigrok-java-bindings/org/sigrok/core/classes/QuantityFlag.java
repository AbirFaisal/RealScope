/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sigrok.core.classes;

/** Flag applied to measured quantity. */
public class QuantityFlag extends EnumValueQuantityFlag {
  protected transient long swigCPtr;

  protected QuantityFlag(long cPtr, boolean cMemoryOwn) {
    super(classesJNI.QuantityFlag_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(QuantityFlag obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        classesJNI.delete_QuantityFlag(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** Voltage measurement is alternating current (AC). */
  public static final QuantityFlag AC = new QuantityFlag(classesJNI.QuantityFlag_AC_get(), false);

  /** Voltage measurement is direct current (DC). */
  public static final QuantityFlag DC = new QuantityFlag(classesJNI.QuantityFlag_DC_get(), false);

  /** This is a true RMS measurement. */
  public static final QuantityFlag RMS = new QuantityFlag(classesJNI.QuantityFlag_RMS_get(), false);

  /** Value is voltage drop across a diode, or NAN. */
  public static final QuantityFlag DIODE = new QuantityFlag(classesJNI.QuantityFlag_DIODE_get(), false);

  /** Device is in \"hold\" mode (repeating the last measurement). */
  public static final QuantityFlag HOLD = new QuantityFlag(classesJNI.QuantityFlag_HOLD_get(), false);

  /** Device is in \"max\" mode, only updating upon a new max value. */
  public static final QuantityFlag MAX = new QuantityFlag(classesJNI.QuantityFlag_MAX_get(), false);

  /** Device is in \"min\" mode, only updating upon a new min value. */
  public static final QuantityFlag MIN = new QuantityFlag(classesJNI.QuantityFlag_MIN_get(), false);

  /** Device is in autoranging mode. */
  public static final QuantityFlag AUTORANGE = new QuantityFlag(classesJNI.QuantityFlag_AUTORANGE_get(), false);

  /** Device is in relative mode. */
  public static final QuantityFlag RELATIVE = new QuantityFlag(classesJNI.QuantityFlag_RELATIVE_get(), false);

  /** Sound pressure level is A-weighted in the frequency domain, according to IEC 61672:2003. */
  public static final QuantityFlag SPL_FREQ_WEIGHT_A = new QuantityFlag(classesJNI.QuantityFlag_SPL_FREQ_WEIGHT_A_get(), false);

  /** Sound pressure level is C-weighted in the frequency domain, according to IEC 61672:2003. */
  public static final QuantityFlag SPL_FREQ_WEIGHT_C = new QuantityFlag(classesJNI.QuantityFlag_SPL_FREQ_WEIGHT_C_get(), false);

  /** Sound pressure level is Z-weighted (i.e. */
  public static final QuantityFlag SPL_FREQ_WEIGHT_Z = new QuantityFlag(classesJNI.QuantityFlag_SPL_FREQ_WEIGHT_Z_get(), false);

  /** Sound pressure level is not weighted in the frequency domain, albeit without standards-defined low and high frequency limits. */
  public static final QuantityFlag SPL_FREQ_WEIGHT_FLAT = new QuantityFlag(classesJNI.QuantityFlag_SPL_FREQ_WEIGHT_FLAT_get(), false);

  /** Sound pressure level measurement is S-weighted (1s) in the time domain. */
  public static final QuantityFlag SPL_TIME_WEIGHT_S = new QuantityFlag(classesJNI.QuantityFlag_SPL_TIME_WEIGHT_S_get(), false);

  /** Sound pressure level measurement is F-weighted (125ms) in the time domain. */
  public static final QuantityFlag SPL_TIME_WEIGHT_F = new QuantityFlag(classesJNI.QuantityFlag_SPL_TIME_WEIGHT_F_get(), false);

  /** Sound pressure level is time-averaged (LAT), also known as Equivalent Continuous A-weighted Sound Level (LEQ). */
  public static final QuantityFlag SPL_LAT = new QuantityFlag(classesJNI.QuantityFlag_SPL_LAT_get(), false);

  /** Sound pressure level represented as a percentage of measurements that were over a preset alarm level. */
  public static final QuantityFlag SPL_PCT_OVER_ALARM = new QuantityFlag(classesJNI.QuantityFlag_SPL_PCT_OVER_ALARM_get(), false);

  /** Time is duration (as opposed to epoch, ...). */
  public static final QuantityFlag DURATION = new QuantityFlag(classesJNI.QuantityFlag_DURATION_get(), false);

  /** Device is in \"avg\" mode, averaging upon each new value. */
  public static final QuantityFlag AVG = new QuantityFlag(classesJNI.QuantityFlag_AVG_get(), false);

  /** Reference value shown. */
  public static final QuantityFlag REFERENCE = new QuantityFlag(classesJNI.QuantityFlag_REFERENCE_get(), false);

  /** Unstable value (hasn't settled yet). */
  public static final QuantityFlag UNSTABLE = new QuantityFlag(classesJNI.QuantityFlag_UNSTABLE_get(), false);

  /** Measurement is four wire (e.g. */
  public static final QuantityFlag FOUR_WIRE = new QuantityFlag(classesJNI.QuantityFlag_FOUR_WIRE_get(), false);


  public static QuantityFlag getAC() {
    long cPtr = classesJNI.QuantityFlag_AC_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getDC() {
    long cPtr = classesJNI.QuantityFlag_DC_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getRMS() {
    long cPtr = classesJNI.QuantityFlag_RMS_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getDIODE() {
    long cPtr = classesJNI.QuantityFlag_DIODE_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getHOLD() {
    long cPtr = classesJNI.QuantityFlag_HOLD_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getMAX() {
    long cPtr = classesJNI.QuantityFlag_MAX_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getMIN() {
    long cPtr = classesJNI.QuantityFlag_MIN_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getAUTORANGE() {
    long cPtr = classesJNI.QuantityFlag_AUTORANGE_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getRELATIVE() {
    long cPtr = classesJNI.QuantityFlag_RELATIVE_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getSPL_FREQ_WEIGHT_A() {
    long cPtr = classesJNI.QuantityFlag_SPL_FREQ_WEIGHT_A_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getSPL_FREQ_WEIGHT_C() {
    long cPtr = classesJNI.QuantityFlag_SPL_FREQ_WEIGHT_C_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getSPL_FREQ_WEIGHT_Z() {
    long cPtr = classesJNI.QuantityFlag_SPL_FREQ_WEIGHT_Z_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getSPL_FREQ_WEIGHT_FLAT() {
    long cPtr = classesJNI.QuantityFlag_SPL_FREQ_WEIGHT_FLAT_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getSPL_TIME_WEIGHT_S() {
    long cPtr = classesJNI.QuantityFlag_SPL_TIME_WEIGHT_S_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getSPL_TIME_WEIGHT_F() {
    long cPtr = classesJNI.QuantityFlag_SPL_TIME_WEIGHT_F_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getSPL_LAT() {
    long cPtr = classesJNI.QuantityFlag_SPL_LAT_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getSPL_PCT_OVER_ALARM() {
    long cPtr = classesJNI.QuantityFlag_SPL_PCT_OVER_ALARM_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getDURATION() {
    long cPtr = classesJNI.QuantityFlag_DURATION_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getAVG() {
    long cPtr = classesJNI.QuantityFlag_AVG_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getREFERENCE() {
    long cPtr = classesJNI.QuantityFlag_REFERENCE_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getUNSTABLE() {
    long cPtr = classesJNI.QuantityFlag_UNSTABLE_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlag getFOUR_WIRE() {
    long cPtr = classesJNI.QuantityFlag_FOUR_WIRE_get();
    return (cPtr == 0) ? null : new QuantityFlag(cPtr, false);
  }

  public static QuantityFlagVector flags_from_mask(long mask) {
    return new QuantityFlagVector(classesJNI.QuantityFlag_flags_from_mask(mask), true);
  }

  public static long mask_from_flags(QuantityFlagVector flags) {
    return classesJNI.QuantityFlag_mask_from_flags(QuantityFlagVector.getCPtr(flags), flags);
  }

}
