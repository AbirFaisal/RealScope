/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sigrok.core.classes;

/**
 * @mainpage API Reference
 *
 * Introduction
 * ------------
 *
 * The sigrok-java API provides an object-oriented Java interface to the
 * functionality in libsigrok. It is built on top of the libsigrokcxx C++ API.
 *
 * Getting started
 * ---------------
 *
 * Usage of the sigrok-java API needs to begin with a call to Context.create().
 * This will create the global libsigrok context and returns a Context object.
 * Methods on this object provide access to the hardware drivers, input and
 * output formats supported by the library, as well as means of creating other
 * objects such as sessions and triggers.
 *
 * Error handling
 * --------------
 *
 * When any libsigrok C API call returns an error, an Error exception is raised,
 * which provides access to the error code and description.
 */

import org.sigrok.core.interfaces.LogCallback;
import org.sigrok.core.interfaces.DatafeedCallback;

public class classesJNI {

  static {
    System.loadLibrary("sigrok_java_core_classes");
  }

  public final static native long new_Variant();
  public final static native void delete_Variant(long jarg1);
  public final static native long new_StringMap__SWIG_0();
  public final static native long new_StringMap__SWIG_1(long jarg1, StringMap jarg1_);
  public final static native long StringMap_size(long jarg1, StringMap jarg1_);
  public final static native boolean StringMap_empty(long jarg1, StringMap jarg1_);
  public final static native void StringMap_clear(long jarg1, StringMap jarg1_);
  public final static native String StringMap_get(long jarg1, StringMap jarg1_, String jarg2);
  public final static native void StringMap_set(long jarg1, StringMap jarg1_, String jarg2, String jarg3);
  public final static native void StringMap_del(long jarg1, StringMap jarg1_, String jarg2);
  public final static native boolean StringMap_has_key(long jarg1, StringMap jarg1_, String jarg2);
  public final static native void delete_StringMap(long jarg1);
  public final static native long new_DriverMap__SWIG_0();
  public final static native long new_DriverMap__SWIG_1(long jarg1, DriverMap jarg1_);
  public final static native long DriverMap_size(long jarg1, DriverMap jarg1_);
  public final static native boolean DriverMap_empty(long jarg1, DriverMap jarg1_);
  public final static native void DriverMap_clear(long jarg1, DriverMap jarg1_);
  public final static native long DriverMap_get(long jarg1, DriverMap jarg1_, String jarg2);
  public final static native void DriverMap_set(long jarg1, DriverMap jarg1_, String jarg2, long jarg3);
  public final static native void DriverMap_del(long jarg1, DriverMap jarg1_, String jarg2);
  public final static native boolean DriverMap_has_key(long jarg1, DriverMap jarg1_, String jarg2);
  public final static native void delete_DriverMap(long jarg1);
  public final static native long new_InputFormatMap__SWIG_0();
  public final static native long new_InputFormatMap__SWIG_1(long jarg1, InputFormatMap jarg1_);
  public final static native long InputFormatMap_size(long jarg1, InputFormatMap jarg1_);
  public final static native boolean InputFormatMap_empty(long jarg1, InputFormatMap jarg1_);
  public final static native void InputFormatMap_clear(long jarg1, InputFormatMap jarg1_);
  public final static native long InputFormatMap_get(long jarg1, InputFormatMap jarg1_, String jarg2);
  public final static native void InputFormatMap_set(long jarg1, InputFormatMap jarg1_, String jarg2, long jarg3);
  public final static native void InputFormatMap_del(long jarg1, InputFormatMap jarg1_, String jarg2);
  public final static native boolean InputFormatMap_has_key(long jarg1, InputFormatMap jarg1_, String jarg2);
  public final static native void delete_InputFormatMap(long jarg1);
  public final static native long new_OutputFormatMap__SWIG_0();
  public final static native long new_OutputFormatMap__SWIG_1(long jarg1, OutputFormatMap jarg1_);
  public final static native long OutputFormatMap_size(long jarg1, OutputFormatMap jarg1_);
  public final static native boolean OutputFormatMap_empty(long jarg1, OutputFormatMap jarg1_);
  public final static native void OutputFormatMap_clear(long jarg1, OutputFormatMap jarg1_);
  public final static native long OutputFormatMap_get(long jarg1, OutputFormatMap jarg1_, String jarg2);
  public final static native void OutputFormatMap_set(long jarg1, OutputFormatMap jarg1_, String jarg2, long jarg3);
  public final static native void OutputFormatMap_del(long jarg1, OutputFormatMap jarg1_, String jarg2);
  public final static native boolean OutputFormatMap_has_key(long jarg1, OutputFormatMap jarg1_, String jarg2);
  public final static native void delete_OutputFormatMap(long jarg1);
  public final static native long new_HardwareDeviceVector__SWIG_0();
  public final static native long new_HardwareDeviceVector__SWIG_1(long jarg1);
  public final static native long HardwareDeviceVector_size(long jarg1, HardwareDeviceVector jarg1_);
  public final static native long HardwareDeviceVector_capacity(long jarg1, HardwareDeviceVector jarg1_);
  public final static native void HardwareDeviceVector_reserve(long jarg1, HardwareDeviceVector jarg1_, long jarg2);
  public final static native boolean HardwareDeviceVector_isEmpty(long jarg1, HardwareDeviceVector jarg1_);
  public final static native void HardwareDeviceVector_clear(long jarg1, HardwareDeviceVector jarg1_);
  public final static native void HardwareDeviceVector_add(long jarg1, HardwareDeviceVector jarg1_, long jarg2);
  public final static native long HardwareDeviceVector_get(long jarg1, HardwareDeviceVector jarg1_, int jarg2);
  public final static native void HardwareDeviceVector_set(long jarg1, HardwareDeviceVector jarg1_, int jarg2, long jarg3);
  public final static native void delete_HardwareDeviceVector(long jarg1);
  public final static native long new_DeviceVector__SWIG_0();
  public final static native long new_DeviceVector__SWIG_1(long jarg1);
  public final static native long DeviceVector_size(long jarg1, DeviceVector jarg1_);
  public final static native long DeviceVector_capacity(long jarg1, DeviceVector jarg1_);
  public final static native void DeviceVector_reserve(long jarg1, DeviceVector jarg1_, long jarg2);
  public final static native boolean DeviceVector_isEmpty(long jarg1, DeviceVector jarg1_);
  public final static native void DeviceVector_clear(long jarg1, DeviceVector jarg1_);
  public final static native void DeviceVector_add(long jarg1, DeviceVector jarg1_, long jarg2);
  public final static native long DeviceVector_get(long jarg1, DeviceVector jarg1_, int jarg2);
  public final static native void DeviceVector_set(long jarg1, DeviceVector jarg1_, int jarg2, long jarg3);
  public final static native void delete_DeviceVector(long jarg1);
  public final static native long new_ChannelVector__SWIG_0();
  public final static native long new_ChannelVector__SWIG_1(long jarg1);
  public final static native long ChannelVector_size(long jarg1, ChannelVector jarg1_);
  public final static native long ChannelVector_capacity(long jarg1, ChannelVector jarg1_);
  public final static native void ChannelVector_reserve(long jarg1, ChannelVector jarg1_, long jarg2);
  public final static native boolean ChannelVector_isEmpty(long jarg1, ChannelVector jarg1_);
  public final static native void ChannelVector_clear(long jarg1, ChannelVector jarg1_);
  public final static native void ChannelVector_add(long jarg1, ChannelVector jarg1_, long jarg2);
  public final static native long ChannelVector_get(long jarg1, ChannelVector jarg1_, int jarg2);
  public final static native void ChannelVector_set(long jarg1, ChannelVector jarg1_, int jarg2, long jarg3);
  public final static native void delete_ChannelVector(long jarg1);
  public final static native long new_ChannelGroupMap__SWIG_0();
  public final static native long new_ChannelGroupMap__SWIG_1(long jarg1, ChannelGroupMap jarg1_);
  public final static native long ChannelGroupMap_size(long jarg1, ChannelGroupMap jarg1_);
  public final static native boolean ChannelGroupMap_empty(long jarg1, ChannelGroupMap jarg1_);
  public final static native void ChannelGroupMap_clear(long jarg1, ChannelGroupMap jarg1_);
  public final static native long ChannelGroupMap_get(long jarg1, ChannelGroupMap jarg1_, String jarg2);
  public final static native void ChannelGroupMap_set(long jarg1, ChannelGroupMap jarg1_, String jarg2, long jarg3);
  public final static native void ChannelGroupMap_del(long jarg1, ChannelGroupMap jarg1_, String jarg2);
  public final static native boolean ChannelGroupMap_has_key(long jarg1, ChannelGroupMap jarg1_, String jarg2);
  public final static native void delete_ChannelGroupMap(long jarg1);
  public final static native long new_ConfigVector__SWIG_0();
  public final static native long new_ConfigVector__SWIG_1(long jarg1);
  public final static native long ConfigVector_size(long jarg1, ConfigVector jarg1_);
  public final static native long ConfigVector_capacity(long jarg1, ConfigVector jarg1_);
  public final static native void ConfigVector_reserve(long jarg1, ConfigVector jarg1_, long jarg2);
  public final static native boolean ConfigVector_isEmpty(long jarg1, ConfigVector jarg1_);
  public final static native void ConfigVector_clear(long jarg1, ConfigVector jarg1_);
  public final static native void ConfigVector_add(long jarg1, ConfigVector jarg1_, long jarg2, ConfigKey jarg2_);
  public final static native long ConfigVector_get(long jarg1, ConfigVector jarg1_, int jarg2);
  public final static native void ConfigVector_set(long jarg1, ConfigVector jarg1_, int jarg2, long jarg3, ConfigKey jarg3_);
  public final static native void delete_ConfigVector(long jarg1);
  public final static native long new_ConfigMap__SWIG_0();
  public final static native long new_ConfigMap__SWIG_1(long jarg1, ConfigMap jarg1_);
  public final static native long ConfigMap_size(long jarg1, ConfigMap jarg1_);
  public final static native boolean ConfigMap_empty(long jarg1, ConfigMap jarg1_);
  public final static native void ConfigMap_clear(long jarg1, ConfigMap jarg1_);
  public final static native long ConfigMap_get(long jarg1, ConfigMap jarg1_, long jarg2, ConfigKey jarg2_);
  public final static native void ConfigMap_set(long jarg1, ConfigMap jarg1_, long jarg2, ConfigKey jarg2_, long jarg3, Variant jarg3_);
  public final static native void ConfigMap_del(long jarg1, ConfigMap jarg1_, long jarg2, ConfigKey jarg2_);
  public final static native boolean ConfigMap_has_key(long jarg1, ConfigMap jarg1_, long jarg2, ConfigKey jarg2_);
  public final static native void delete_ConfigMap(long jarg1);
  public final static native long new_ConfigSet();
  public final static native void delete_ConfigSet(long jarg1);
  public final static native long new_CapabilityVector__SWIG_0();
  public final static native long new_CapabilityVector__SWIG_1(long jarg1);
  public final static native long CapabilityVector_size(long jarg1, CapabilityVector jarg1_);
  public final static native long CapabilityVector_capacity(long jarg1, CapabilityVector jarg1_);
  public final static native void CapabilityVector_reserve(long jarg1, CapabilityVector jarg1_, long jarg2);
  public final static native boolean CapabilityVector_isEmpty(long jarg1, CapabilityVector jarg1_);
  public final static native void CapabilityVector_clear(long jarg1, CapabilityVector jarg1_);
  public final static native void CapabilityVector_add(long jarg1, CapabilityVector jarg1_, long jarg2, Capability jarg2_);
  public final static native long CapabilityVector_get(long jarg1, CapabilityVector jarg1_, int jarg2);
  public final static native void CapabilityVector_set(long jarg1, CapabilityVector jarg1_, int jarg2, long jarg3, Capability jarg3_);
  public final static native void delete_CapabilityVector(long jarg1);
  public final static native long new_CapabilitySet();
  public final static native void delete_CapabilitySet(long jarg1);
  public final static native long new_OptionVector__SWIG_0();
  public final static native long new_OptionVector__SWIG_1(long jarg1);
  public final static native long OptionVector_size(long jarg1, OptionVector jarg1_);
  public final static native long OptionVector_capacity(long jarg1, OptionVector jarg1_);
  public final static native void OptionVector_reserve(long jarg1, OptionVector jarg1_, long jarg2);
  public final static native boolean OptionVector_isEmpty(long jarg1, OptionVector jarg1_);
  public final static native void OptionVector_clear(long jarg1, OptionVector jarg1_);
  public final static native void OptionVector_add(long jarg1, OptionVector jarg1_, long jarg2);
  public final static native long OptionVector_get(long jarg1, OptionVector jarg1_, int jarg2);
  public final static native void OptionVector_set(long jarg1, OptionVector jarg1_, int jarg2, long jarg3);
  public final static native void delete_OptionVector(long jarg1);
  public final static native long new_OptionMap__SWIG_0();
  public final static native long new_OptionMap__SWIG_1(long jarg1, OptionMap jarg1_);
  public final static native long OptionMap_size(long jarg1, OptionMap jarg1_);
  public final static native boolean OptionMap_empty(long jarg1, OptionMap jarg1_);
  public final static native void OptionMap_clear(long jarg1, OptionMap jarg1_);
  public final static native long OptionMap_get(long jarg1, OptionMap jarg1_, String jarg2);
  public final static native void OptionMap_set(long jarg1, OptionMap jarg1_, String jarg2, long jarg3);
  public final static native void OptionMap_del(long jarg1, OptionMap jarg1_, String jarg2);
  public final static native boolean OptionMap_has_key(long jarg1, OptionMap jarg1_, String jarg2);
  public final static native void delete_OptionMap(long jarg1);
  public final static native long new_VariantVector__SWIG_0();
  public final static native long new_VariantVector__SWIG_1(long jarg1);
  public final static native long VariantVector_size(long jarg1, VariantVector jarg1_);
  public final static native long VariantVector_capacity(long jarg1, VariantVector jarg1_);
  public final static native void VariantVector_reserve(long jarg1, VariantVector jarg1_, long jarg2);
  public final static native boolean VariantVector_isEmpty(long jarg1, VariantVector jarg1_);
  public final static native void VariantVector_clear(long jarg1, VariantVector jarg1_);
  public final static native void VariantVector_add(long jarg1, VariantVector jarg1_, long jarg2, Variant jarg2_);
  public final static native long VariantVector_get(long jarg1, VariantVector jarg1_, int jarg2);
  public final static native void VariantVector_set(long jarg1, VariantVector jarg1_, int jarg2, long jarg3, Variant jarg3_);
  public final static native void delete_VariantVector(long jarg1);
  public final static native long new_VariantMap__SWIG_0();
  public final static native long new_VariantMap__SWIG_1(long jarg1, VariantMap jarg1_);
  public final static native long VariantMap_size(long jarg1, VariantMap jarg1_);
  public final static native boolean VariantMap_empty(long jarg1, VariantMap jarg1_);
  public final static native void VariantMap_clear(long jarg1, VariantMap jarg1_);
  public final static native long VariantMap_get(long jarg1, VariantMap jarg1_, String jarg2);
  public final static native void VariantMap_set(long jarg1, VariantMap jarg1_, String jarg2, long jarg3, Variant jarg3_);
  public final static native void VariantMap_del(long jarg1, VariantMap jarg1_, String jarg2);
  public final static native boolean VariantMap_has_key(long jarg1, VariantMap jarg1_, String jarg2);
  public final static native void delete_VariantMap(long jarg1);
  public final static native long new_QuantityFlagVector__SWIG_0();
  public final static native long new_QuantityFlagVector__SWIG_1(long jarg1);
  public final static native long QuantityFlagVector_size(long jarg1, QuantityFlagVector jarg1_);
  public final static native long QuantityFlagVector_capacity(long jarg1, QuantityFlagVector jarg1_);
  public final static native void QuantityFlagVector_reserve(long jarg1, QuantityFlagVector jarg1_, long jarg2);
  public final static native boolean QuantityFlagVector_isEmpty(long jarg1, QuantityFlagVector jarg1_);
  public final static native void QuantityFlagVector_clear(long jarg1, QuantityFlagVector jarg1_);
  public final static native void QuantityFlagVector_add(long jarg1, QuantityFlagVector jarg1_, long jarg2, QuantityFlag jarg2_);
  public final static native long QuantityFlagVector_get(long jarg1, QuantityFlagVector jarg1_, int jarg2);
  public final static native void QuantityFlagVector_set(long jarg1, QuantityFlagVector jarg1_, int jarg2, long jarg3, QuantityFlag jarg3_);
  public final static native void delete_QuantityFlagVector(long jarg1);
  public final static native long new_TriggerStageVector__SWIG_0();
  public final static native long new_TriggerStageVector__SWIG_1(long jarg1);
  public final static native long TriggerStageVector_size(long jarg1, TriggerStageVector jarg1_);
  public final static native long TriggerStageVector_capacity(long jarg1, TriggerStageVector jarg1_);
  public final static native void TriggerStageVector_reserve(long jarg1, TriggerStageVector jarg1_, long jarg2);
  public final static native boolean TriggerStageVector_isEmpty(long jarg1, TriggerStageVector jarg1_);
  public final static native void TriggerStageVector_clear(long jarg1, TriggerStageVector jarg1_);
  public final static native void TriggerStageVector_add(long jarg1, TriggerStageVector jarg1_, long jarg2);
  public final static native long TriggerStageVector_get(long jarg1, TriggerStageVector jarg1_, int jarg2);
  public final static native void TriggerStageVector_set(long jarg1, TriggerStageVector jarg1_, int jarg2, long jarg3);
  public final static native void delete_TriggerStageVector(long jarg1);
  public final static native long new_TriggerMatchVector__SWIG_0();
  public final static native long new_TriggerMatchVector__SWIG_1(long jarg1);
  public final static native long TriggerMatchVector_size(long jarg1, TriggerMatchVector jarg1_);
  public final static native long TriggerMatchVector_capacity(long jarg1, TriggerMatchVector jarg1_);
  public final static native void TriggerMatchVector_reserve(long jarg1, TriggerMatchVector jarg1_, long jarg2);
  public final static native boolean TriggerMatchVector_isEmpty(long jarg1, TriggerMatchVector jarg1_);
  public final static native void TriggerMatchVector_clear(long jarg1, TriggerMatchVector jarg1_);
  public final static native void TriggerMatchVector_add(long jarg1, TriggerMatchVector jarg1_, long jarg2);
  public final static native long TriggerMatchVector_get(long jarg1, TriggerMatchVector jarg1_, int jarg2);
  public final static native void TriggerMatchVector_set(long jarg1, TriggerMatchVector jarg1_, int jarg2, long jarg3);
  public final static native void delete_TriggerMatchVector(long jarg1);
  public final static native long new_Error(int jarg1);
  public final static native void delete_Error(long jarg1);
  public final static native int Error_result_get(long jarg1, Error jarg1_);
  public final static native String Error_what(long jarg1, Error jarg1_);
  public final static native void delete_ResourceReader(long jarg1);
  public final static native long Context_create();
  public final static native String Context_package_version();
  public final static native String Context_lib_version();
  public final static native java.util.Map<String,Driver> Context_drivers(long jarg1, Context jarg1_);
  public final static native java.util.Map<String,InputFormat> Context_input_formats(long jarg1, Context jarg1_);
  public final static native long Context_input_format_match(long jarg1, Context jarg1_, String jarg2);
  public final static native java.util.Map<String,OutputFormat> Context_output_formats(long jarg1, Context jarg1_);
  public final static native long Context_log_level(long jarg1, Context jarg1_);
  public final static native void Context_set_log_level(long jarg1, Context jarg1_, long jarg2, LogLevel jarg2_);
  public final static native void Context_set_log_callback(long jarg1, Context jarg1_, long jarg2);
  public final static native void Context_set_log_callback_default(long jarg1, Context jarg1_);
  public final static native void Context_set_resource_reader(long jarg1, Context jarg1_, long jarg2, ResourceReader jarg2_);
  public final static native long Context_create_session(long jarg1, Context jarg1_);
  public final static native long Context_create_user_device(long jarg1, Context jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native long Context_create_header_packet(long jarg1, Context jarg1_, long jarg2);
  public final static native long Context_create_logic_packet(long jarg1, Context jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long Context_load_session(long jarg1, Context jarg1_, String jarg2);
  public final static native long Context_create_trigger(long jarg1, Context jarg1_, String jarg2);
  public final static native long Context_open_file(long jarg1, Context jarg1_, String jarg2);
  public final static native long Context_open_stream(long jarg1, Context jarg1_, String jarg2);
  public final static native java.util.Map<String,String> Context_serials(long jarg1, Context jarg1_, long jarg2, Driver jarg2_);
  public final static native void delete_Context(long jarg1);
  public final static native void Context_add_log_callback(long jarg1, Context jarg1_, LogCallback jarg3);
  public final static native long Configurable_config_keys(long jarg1, Configurable jarg1_);
  public final static native long Configurable_config_get(long jarg1, Configurable jarg1_, long jarg2, ConfigKey jarg2_);
  public final static native void Configurable_config_set(long jarg1, Configurable jarg1_, long jarg2, ConfigKey jarg2_, long jarg3, Variant jarg3_);
  public final static native long Configurable_config_list(long jarg1, Configurable jarg1_, long jarg2, ConfigKey jarg2_);
  public final static native long Configurable_config_capabilities(long jarg1, Configurable jarg1_, long jarg2, ConfigKey jarg2_);
  public final static native boolean Configurable_config_check(long jarg1, Configurable jarg1_, long jarg2, ConfigKey jarg2_, long jarg3, Capability jarg3_);
  public final static native void delete_Configurable(long jarg1);
  public final static native String Driver_name(long jarg1, Driver jarg1_);
  public final static native String Driver_long_name(long jarg1, Driver jarg1_);
  public final static native long Driver_scan_options(long jarg1, Driver jarg1_);
  public final static native java.util.Vector<HardwareDevice> Driver_scan__SWIG_0(long jarg1, Driver jarg1_, long jarg2, ConfigMap jarg2_);
  public final static native java.util.Vector<HardwareDevice> Driver_scan__SWIG_1(long jarg1, Driver jarg1_);
  public final static native void delete_Driver(long jarg1);
  public final static native String Device_vendor(long jarg1, Device jarg1_);
  public final static native String Device_model(long jarg1, Device jarg1_);
  public final static native String Device_version(long jarg1, Device jarg1_);
  public final static native String Device_serial_number(long jarg1, Device jarg1_);
  public final static native String Device_connection_id(long jarg1, Device jarg1_);
  public final static native java.util.Vector<Channel> Device_channels(long jarg1, Device jarg1_);
  public final static native long Device_channel_groups(long jarg1, Device jarg1_);
  public final static native void Device_open(long jarg1, Device jarg1_);
  public final static native void Device_close(long jarg1, Device jarg1_);
  public final static native void delete_Device(long jarg1);
  public final static native long HardwareDevice_driver(long jarg1, HardwareDevice jarg1_);
  public final static native void delete_HardwareDevice(long jarg1);
  public final static native long UserDevice_add_channel(long jarg1, UserDevice jarg1_, long jarg2, long jarg3, ChannelType jarg3_, String jarg4);
  public final static native void delete_UserDevice(long jarg1);
  public final static native String Channel_name(long jarg1, Channel jarg1_);
  public final static native void Channel_set_name(long jarg1, Channel jarg1_, String jarg2);
  public final static native long Channel_type(long jarg1, Channel jarg1_);
  public final static native boolean Channel_enabled(long jarg1, Channel jarg1_);
  public final static native void Channel_set_enabled(long jarg1, Channel jarg1_, boolean jarg2);
  public final static native long Channel_index(long jarg1, Channel jarg1_);
  public final static native void delete_Channel(long jarg1);
  public final static native String ChannelGroup_name(long jarg1, ChannelGroup jarg1_);
  public final static native java.util.Vector<Channel> ChannelGroup_channels(long jarg1, ChannelGroup jarg1_);
  public final static native void delete_ChannelGroup(long jarg1);
  public final static native String Trigger_name(long jarg1, Trigger jarg1_);
  public final static native long Trigger_stages(long jarg1, Trigger jarg1_);
  public final static native long Trigger_add_stage(long jarg1, Trigger jarg1_);
  public final static native void delete_Trigger(long jarg1);
  public final static native int TriggerStage_number(long jarg1, TriggerStage jarg1_);
  public final static native long TriggerStage_matches(long jarg1, TriggerStage jarg1_);
  public final static native void TriggerStage_add_match__SWIG_0(long jarg1, TriggerStage jarg1_, long jarg2, Channel jarg2_, long jarg3, TriggerMatchType jarg3_);
  public final static native void TriggerStage_add_match__SWIG_1(long jarg1, TriggerStage jarg1_, long jarg2, Channel jarg2_, long jarg3, TriggerMatchType jarg3_, float jarg4);
  public final static native void delete_TriggerStage(long jarg1);
  public final static native long TriggerMatch_channel(long jarg1, TriggerMatch jarg1_);
  public final static native long TriggerMatch_type(long jarg1, TriggerMatch jarg1_);
  public final static native float TriggerMatch_value(long jarg1, TriggerMatch jarg1_);
  public final static native void delete_TriggerMatch(long jarg1);
  public final static native void delete_SessionDevice(long jarg1);
  public final static native void Session_add_device(long jarg1, Session jarg1_, long jarg2, Device jarg2_);
  public final static native long Session_devices(long jarg1, Session jarg1_);
  public final static native void Session_remove_devices(long jarg1, Session jarg1_);
  public final static native void Session_add_datafeed_callback__SWIG_0(long jarg1, Session jarg1_, long jarg2);
  public final static native void Session_remove_datafeed_callbacks(long jarg1, Session jarg1_);
  public final static native void Session_start(long jarg1, Session jarg1_);
  public final static native void Session_run(long jarg1, Session jarg1_);
  public final static native void Session_stop(long jarg1, Session jarg1_);
  public final static native boolean Session_is_running(long jarg1, Session jarg1_);
  public final static native void Session_set_stopped_callback(long jarg1, Session jarg1_, long jarg2);
  public final static native long Session_trigger(long jarg1, Session jarg1_);
  public final static native long Session_context(long jarg1, Session jarg1_);
  public final static native void Session_set_trigger(long jarg1, Session jarg1_, long jarg2, Trigger jarg2_);
  public final static native String Session_filename(long jarg1, Session jarg1_);
  public final static native void delete_Session(long jarg1);
  public final static native void Session_add_datafeed_callback__SWIG_1(long jarg1, Session jarg1_, DatafeedCallback jarg3);
  public final static native long Packet_type(long jarg1, Packet jarg1_);
  public final static native long Packet_payload(long jarg1, Packet jarg1_);
  public final static native void delete_Packet(long jarg1);
  public final static native void delete_PacketPayload(long jarg1);
  public final static native int Header_feed_version(long jarg1, Header jarg1_);
  public final static native long Header_start_time(long jarg1, Header jarg1_);
  public final static native void delete_Header(long jarg1);
  public final static native void delete_Meta(long jarg1);
  public final static native long Logic_data_pointer(long jarg1, Logic jarg1_);
  public final static native long Logic_data_length(long jarg1, Logic jarg1_);
  public final static native long Logic_unit_size(long jarg1, Logic jarg1_);
  public final static native void delete_Logic(long jarg1);
  public final static native long Analog_data_pointer(long jarg1, Analog jarg1_);
  public final static native void Analog_get_data_as_float(long jarg1, Analog jarg1_, long jarg2);
  public final static native long Analog_num_samples(long jarg1, Analog jarg1_);
  public final static native java.util.Vector<Channel> Analog_channels(long jarg1, Analog jarg1_);
  public final static native long Analog_unitsize(long jarg1, Analog jarg1_);
  public final static native boolean Analog_is_signed(long jarg1, Analog jarg1_);
  public final static native boolean Analog_is_float(long jarg1, Analog jarg1_);
  public final static native boolean Analog_is_bigendian(long jarg1, Analog jarg1_);
  public final static native int Analog_digits(long jarg1, Analog jarg1_);
  public final static native boolean Analog_is_digits_decimal(long jarg1, Analog jarg1_);
  public final static native long Analog_scale(long jarg1, Analog jarg1_);
  public final static native long Analog_offset(long jarg1, Analog jarg1_);
  public final static native long Analog_mq(long jarg1, Analog jarg1_);
  public final static native long Analog_unit(long jarg1, Analog jarg1_);
  public final static native long Analog_mq_flags(long jarg1, Analog jarg1_);
  public final static native long Analog_get_logic_via_threshold__SWIG_0(long jarg1, Analog jarg1_, float jarg2, long jarg3);
  public final static native long Analog_get_logic_via_threshold__SWIG_1(long jarg1, Analog jarg1_, float jarg2);
  public final static native long Analog_get_logic_via_schmitt_trigger__SWIG_0(long jarg1, Analog jarg1_, float jarg2, float jarg3, long jarg4, long jarg5);
  public final static native long Analog_get_logic_via_schmitt_trigger__SWIG_1(long jarg1, Analog jarg1_, float jarg2, float jarg3, long jarg4);
  public final static native void delete_Analog(long jarg1);
  public final static native long Rational_numerator(long jarg1, Rational jarg1_);
  public final static native long Rational_denominator(long jarg1, Rational jarg1_);
  public final static native float Rational_value(long jarg1, Rational jarg1_);
  public final static native String InputFormat_name(long jarg1, InputFormat jarg1_);
  public final static native String InputFormat_description(long jarg1, InputFormat jarg1_);
  public final static native long InputFormat_extensions(long jarg1, InputFormat jarg1_);
  public final static native long InputFormat_options(long jarg1, InputFormat jarg1_);
  public final static native long InputFormat_create_input__SWIG_0(long jarg1, InputFormat jarg1_, long jarg2, VariantMap jarg2_);
  public final static native long InputFormat_create_input__SWIG_1(long jarg1, InputFormat jarg1_);
  public final static native void delete_InputFormat(long jarg1);
  public final static native long Input_device(long jarg1, Input jarg1_);
  public final static native void Input_send(long jarg1, Input jarg1_, long jarg2, long jarg3);
  public final static native void Input_end(long jarg1, Input jarg1_);
  public final static native void Input_reset(long jarg1, Input jarg1_);
  public final static native void delete_Input(long jarg1);
  public final static native void delete_InputDevice(long jarg1);
  public final static native String Option_id(long jarg1, Option jarg1_);
  public final static native String Option_name(long jarg1, Option jarg1_);
  public final static native String Option_description(long jarg1, Option jarg1_);
  public final static native long Option_default_value(long jarg1, Option jarg1_);
  public final static native long Option_values(long jarg1, Option jarg1_);
  public final static native long Option_parse_string(long jarg1, Option jarg1_, String jarg2);
  public final static native void delete_Option(long jarg1);
  public final static native String OutputFormat_name(long jarg1, OutputFormat jarg1_);
  public final static native String OutputFormat_description(long jarg1, OutputFormat jarg1_);
  public final static native long OutputFormat_extensions(long jarg1, OutputFormat jarg1_);
  public final static native long OutputFormat_options(long jarg1, OutputFormat jarg1_);
  public final static native long OutputFormat_create_output__SWIG_0(long jarg1, OutputFormat jarg1_, long jarg2, Device jarg2_, long jarg3, VariantMap jarg3_);
  public final static native long OutputFormat_create_output__SWIG_1(long jarg1, OutputFormat jarg1_, long jarg2, Device jarg2_);
  public final static native long OutputFormat_create_output__SWIG_2(long jarg1, OutputFormat jarg1_, String jarg2, long jarg3, Device jarg3_, long jarg4, VariantMap jarg4_);
  public final static native long OutputFormat_create_output__SWIG_3(long jarg1, OutputFormat jarg1_, String jarg2, long jarg3, Device jarg3_);
  public final static native boolean OutputFormat_test_flag(long jarg1, OutputFormat jarg1_, long jarg2, OutputFlag jarg2_);
  public final static native void delete_OutputFormat(long jarg1);
  public final static native String Output_receive(long jarg1, Output jarg1_, long jarg2, Packet jarg2_);
  public final static native void delete_Output(long jarg1);
  public final static native int EnumValueLogLevel_id(long jarg1, EnumValueLogLevel jarg1_);
  public final static native String EnumValueLogLevel_name(long jarg1, EnumValueLogLevel jarg1_);
  public final static native long EnumValueLogLevel_get(int jarg1);
  public final static native long EnumValueLogLevel_values();
  public final static native int EnumValueDataType_id(long jarg1, EnumValueDataType jarg1_);
  public final static native String EnumValueDataType_name(long jarg1, EnumValueDataType jarg1_);
  public final static native long EnumValueDataType_get(int jarg1);
  public final static native long EnumValueDataType_values();
  public final static native int EnumValuePacketType_id(long jarg1, EnumValuePacketType jarg1_);
  public final static native String EnumValuePacketType_name(long jarg1, EnumValuePacketType jarg1_);
  public final static native long EnumValuePacketType_get(int jarg1);
  public final static native long EnumValuePacketType_values();
  public final static native int EnumValueQuantity_id(long jarg1, EnumValueQuantity jarg1_);
  public final static native String EnumValueQuantity_name(long jarg1, EnumValueQuantity jarg1_);
  public final static native long EnumValueQuantity_get(int jarg1);
  public final static native long EnumValueQuantity_values();
  public final static native int EnumValueUnit_id(long jarg1, EnumValueUnit jarg1_);
  public final static native String EnumValueUnit_name(long jarg1, EnumValueUnit jarg1_);
  public final static native long EnumValueUnit_get(int jarg1);
  public final static native long EnumValueUnit_values();
  public final static native int EnumValueQuantityFlag_id(long jarg1, EnumValueQuantityFlag jarg1_);
  public final static native String EnumValueQuantityFlag_name(long jarg1, EnumValueQuantityFlag jarg1_);
  public final static native long EnumValueQuantityFlag_get(int jarg1);
  public final static native long EnumValueQuantityFlag_values();
  public final static native int EnumValueTriggerMatchType_id(long jarg1, EnumValueTriggerMatchType jarg1_);
  public final static native String EnumValueTriggerMatchType_name(long jarg1, EnumValueTriggerMatchType jarg1_);
  public final static native long EnumValueTriggerMatchType_get(int jarg1);
  public final static native long EnumValueTriggerMatchType_values();
  public final static native int EnumValueOutputFlag_id(long jarg1, EnumValueOutputFlag jarg1_);
  public final static native String EnumValueOutputFlag_name(long jarg1, EnumValueOutputFlag jarg1_);
  public final static native long EnumValueOutputFlag_get(int jarg1);
  public final static native long EnumValueOutputFlag_values();
  public final static native int EnumValueChannelType_id(long jarg1, EnumValueChannelType jarg1_);
  public final static native String EnumValueChannelType_name(long jarg1, EnumValueChannelType jarg1_);
  public final static native long EnumValueChannelType_get(int jarg1);
  public final static native long EnumValueChannelType_values();
  public final static native int EnumValueCapability_id(long jarg1, EnumValueCapability jarg1_);
  public final static native String EnumValueCapability_name(long jarg1, EnumValueCapability jarg1_);
  public final static native long EnumValueCapability_get(int jarg1);
  public final static native long EnumValueCapability_values();
  public final static native int EnumValueConfigKey_id(long jarg1, EnumValueConfigKey jarg1_);
  public final static native String EnumValueConfigKey_name(long jarg1, EnumValueConfigKey jarg1_);
  public final static native long EnumValueConfigKey_get(int jarg1);
  public final static native long EnumValueConfigKey_values();
  public final static native long LogLevel_NONE_get();
  public final static native long LogLevel_ERR_get();
  public final static native long LogLevel_WARN_get();
  public final static native long LogLevel_INFO_get();
  public final static native long LogLevel_DBG_get();
  public final static native long LogLevel_SPEW_get();
  public final static native void delete_LogLevel(long jarg1);
  public final static native long DataType_UINT64_get();
  public final static native long DataType_STRING_get();
  public final static native long DataType_BOOL_get();
  public final static native long DataType_FLOAT_get();
  public final static native long DataType_RATIONAL_PERIOD_get();
  public final static native long DataType_RATIONAL_VOLT_get();
  public final static native long DataType_KEYVALUE_get();
  public final static native long DataType_UINT64_RANGE_get();
  public final static native long DataType_DOUBLE_RANGE_get();
  public final static native long DataType_INT32_get();
  public final static native long DataType_MQ_get();
  public final static native void delete_DataType(long jarg1);
  public final static native long PacketType_HEADER_get();
  public final static native long PacketType_END_get();
  public final static native long PacketType_META_get();
  public final static native long PacketType_TRIGGER_get();
  public final static native long PacketType_LOGIC_get();
  public final static native long PacketType_FRAME_BEGIN_get();
  public final static native long PacketType_FRAME_END_get();
  public final static native long PacketType_ANALOG_get();
  public final static native void delete_PacketType(long jarg1);
  public final static native long Quantity_VOLTAGE_get();
  public final static native long Quantity_CURRENT_get();
  public final static native long Quantity_RESISTANCE_get();
  public final static native long Quantity_CAPACITANCE_get();
  public final static native long Quantity_TEMPERATURE_get();
  public final static native long Quantity_FREQUENCY_get();
  public final static native long Quantity_DUTY_CYCLE_get();
  public final static native long Quantity_CONTINUITY_get();
  public final static native long Quantity_PULSE_WIDTH_get();
  public final static native long Quantity_CONDUCTANCE_get();
  public final static native long Quantity_POWER_get();
  public final static native long Quantity_GAIN_get();
  public final static native long Quantity_SOUND_PRESSURE_LEVEL_get();
  public final static native long Quantity_CARBON_MONOXIDE_get();
  public final static native long Quantity_RELATIVE_HUMIDITY_get();
  public final static native long Quantity_TIME_get();
  public final static native long Quantity_WIND_SPEED_get();
  public final static native long Quantity_PRESSURE_get();
  public final static native long Quantity_PARALLEL_INDUCTANCE_get();
  public final static native long Quantity_PARALLEL_CAPACITANCE_get();
  public final static native long Quantity_PARALLEL_RESISTANCE_get();
  public final static native long Quantity_SERIES_INDUCTANCE_get();
  public final static native long Quantity_SERIES_CAPACITANCE_get();
  public final static native long Quantity_SERIES_RESISTANCE_get();
  public final static native long Quantity_DISSIPATION_FACTOR_get();
  public final static native long Quantity_QUALITY_FACTOR_get();
  public final static native long Quantity_PHASE_ANGLE_get();
  public final static native long Quantity_DIFFERENCE_get();
  public final static native long Quantity_COUNT_get();
  public final static native long Quantity_POWER_FACTOR_get();
  public final static native long Quantity_APPARENT_POWER_get();
  public final static native long Quantity_MASS_get();
  public final static native long Quantity_HARMONIC_RATIO_get();
  public final static native void delete_Quantity(long jarg1);
  public final static native long Unit_VOLT_get();
  public final static native long Unit_AMPERE_get();
  public final static native long Unit_OHM_get();
  public final static native long Unit_FARAD_get();
  public final static native long Unit_KELVIN_get();
  public final static native long Unit_CELSIUS_get();
  public final static native long Unit_FAHRENHEIT_get();
  public final static native long Unit_HERTZ_get();
  public final static native long Unit_PERCENTAGE_get();
  public final static native long Unit_BOOLEAN_get();
  public final static native long Unit_SECOND_get();
  public final static native long Unit_SIEMENS_get();
  public final static native long Unit_DECIBEL_MW_get();
  public final static native long Unit_DECIBEL_VOLT_get();
  public final static native long Unit_UNITLESS_get();
  public final static native long Unit_DECIBEL_SPL_get();
  public final static native long Unit_CONCENTRATION_get();
  public final static native long Unit_REVOLUTIONS_PER_MINUTE_get();
  public final static native long Unit_VOLT_AMPERE_get();
  public final static native long Unit_WATT_get();
  public final static native long Unit_WATT_HOUR_get();
  public final static native long Unit_METER_SECOND_get();
  public final static native long Unit_HECTOPASCAL_get();
  public final static native long Unit_HUMIDITY_293K_get();
  public final static native long Unit_DEGREE_get();
  public final static native long Unit_HENRY_get();
  public final static native long Unit_GRAM_get();
  public final static native long Unit_CARAT_get();
  public final static native long Unit_OUNCE_get();
  public final static native long Unit_TROY_OUNCE_get();
  public final static native long Unit_POUND_get();
  public final static native long Unit_PENNYWEIGHT_get();
  public final static native long Unit_GRAIN_get();
  public final static native long Unit_TAEL_get();
  public final static native long Unit_MOMME_get();
  public final static native long Unit_TOLA_get();
  public final static native long Unit_PIECE_get();
  public final static native void delete_Unit(long jarg1);
  public final static native long QuantityFlag_AC_get();
  public final static native long QuantityFlag_DC_get();
  public final static native long QuantityFlag_RMS_get();
  public final static native long QuantityFlag_DIODE_get();
  public final static native long QuantityFlag_HOLD_get();
  public final static native long QuantityFlag_MAX_get();
  public final static native long QuantityFlag_MIN_get();
  public final static native long QuantityFlag_AUTORANGE_get();
  public final static native long QuantityFlag_RELATIVE_get();
  public final static native long QuantityFlag_SPL_FREQ_WEIGHT_A_get();
  public final static native long QuantityFlag_SPL_FREQ_WEIGHT_C_get();
  public final static native long QuantityFlag_SPL_FREQ_WEIGHT_Z_get();
  public final static native long QuantityFlag_SPL_FREQ_WEIGHT_FLAT_get();
  public final static native long QuantityFlag_SPL_TIME_WEIGHT_S_get();
  public final static native long QuantityFlag_SPL_TIME_WEIGHT_F_get();
  public final static native long QuantityFlag_SPL_LAT_get();
  public final static native long QuantityFlag_SPL_PCT_OVER_ALARM_get();
  public final static native long QuantityFlag_DURATION_get();
  public final static native long QuantityFlag_AVG_get();
  public final static native long QuantityFlag_REFERENCE_get();
  public final static native long QuantityFlag_UNSTABLE_get();
  public final static native long QuantityFlag_FOUR_WIRE_get();
  public final static native long QuantityFlag_flags_from_mask(long jarg1);
  public final static native long QuantityFlag_mask_from_flags(long jarg1, QuantityFlagVector jarg1_);
  public final static native void delete_QuantityFlag(long jarg1);
  public final static native long TriggerMatchType_ZERO_get();
  public final static native long TriggerMatchType_ONE_get();
  public final static native long TriggerMatchType_RISING_get();
  public final static native long TriggerMatchType_FALLING_get();
  public final static native long TriggerMatchType_EDGE_get();
  public final static native long TriggerMatchType_OVER_get();
  public final static native long TriggerMatchType_UNDER_get();
  public final static native void delete_TriggerMatchType(long jarg1);
  public final static native long OutputFlag_INTERNAL_IO_HANDLING_get();
  public final static native void delete_OutputFlag(long jarg1);
  public final static native long ChannelType_LOGIC_get();
  public final static native long ChannelType_ANALOG_get();
  public final static native void delete_ChannelType(long jarg1);
  public final static native long Capability_GET_get();
  public final static native long Capability_SET_get();
  public final static native long Capability_LIST_get();
  public final static native void delete_Capability(long jarg1);
  public final static native long ConfigKey_LOGIC_ANALYZER_get();
  public final static native long ConfigKey_OSCILLOSCOPE_get();
  public final static native long ConfigKey_MULTIMETER_get();
  public final static native long ConfigKey_DEMO_DEV_get();
  public final static native long ConfigKey_SOUNDLEVELMETER_get();
  public final static native long ConfigKey_THERMOMETER_get();
  public final static native long ConfigKey_HYGROMETER_get();
  public final static native long ConfigKey_ENERGYMETER_get();
  public final static native long ConfigKey_DEMODULATOR_get();
  public final static native long ConfigKey_POWER_SUPPLY_get();
  public final static native long ConfigKey_LCRMETER_get();
  public final static native long ConfigKey_ELECTRONIC_LOAD_get();
  public final static native long ConfigKey_SCALE_get();
  public final static native long ConfigKey_SIGNAL_GENERATOR_get();
  public final static native long ConfigKey_POWERMETER_get();
  public final static native long ConfigKey_CONN_get();
  public final static native long ConfigKey_SERIALCOMM_get();
  public final static native long ConfigKey_MODBUSADDR_get();
  public final static native long ConfigKey_SAMPLERATE_get();
  public final static native long ConfigKey_CAPTURE_RATIO_get();
  public final static native long ConfigKey_PATTERN_MODE_get();
  public final static native long ConfigKey_RLE_get();
  public final static native long ConfigKey_TRIGGER_SLOPE_get();
  public final static native long ConfigKey_AVERAGING_get();
  public final static native long ConfigKey_AVG_SAMPLES_get();
  public final static native long ConfigKey_TRIGGER_SOURCE_get();
  public final static native long ConfigKey_HORIZ_TRIGGERPOS_get();
  public final static native long ConfigKey_BUFFERSIZE_get();
  public final static native long ConfigKey_TIMEBASE_get();
  public final static native long ConfigKey_FILTER_get();
  public final static native long ConfigKey_VDIV_get();
  public final static native long ConfigKey_COUPLING_get();
  public final static native long ConfigKey_TRIGGER_MATCH_get();
  public final static native long ConfigKey_SAMPLE_INTERVAL_get();
  public final static native long ConfigKey_NUM_HDIV_get();
  public final static native long ConfigKey_NUM_VDIV_get();
  public final static native long ConfigKey_SPL_WEIGHT_FREQ_get();
  public final static native long ConfigKey_SPL_WEIGHT_TIME_get();
  public final static native long ConfigKey_SPL_MEASUREMENT_RANGE_get();
  public final static native long ConfigKey_HOLD_MAX_get();
  public final static native long ConfigKey_HOLD_MIN_get();
  public final static native long ConfigKey_VOLTAGE_THRESHOLD_get();
  public final static native long ConfigKey_EXTERNAL_CLOCK_get();
  public final static native long ConfigKey_SWAP_get();
  public final static native long ConfigKey_CENTER_FREQUENCY_get();
  public final static native long ConfigKey_NUM_LOGIC_CHANNELS_get();
  public final static native long ConfigKey_NUM_ANALOG_CHANNELS_get();
  public final static native long ConfigKey_VOLTAGE_get();
  public final static native long ConfigKey_VOLTAGE_TARGET_get();
  public final static native long ConfigKey_CURRENT_get();
  public final static native long ConfigKey_CURRENT_LIMIT_get();
  public final static native long ConfigKey_ENABLED_get();
  public final static native long ConfigKey_CHANNEL_CONFIG_get();
  public final static native long ConfigKey_OVER_VOLTAGE_PROTECTION_ENABLED_get();
  public final static native long ConfigKey_OVER_VOLTAGE_PROTECTION_ACTIVE_get();
  public final static native long ConfigKey_OVER_VOLTAGE_PROTECTION_THRESHOLD_get();
  public final static native long ConfigKey_OVER_CURRENT_PROTECTION_ENABLED_get();
  public final static native long ConfigKey_OVER_CURRENT_PROTECTION_ACTIVE_get();
  public final static native long ConfigKey_OVER_CURRENT_PROTECTION_THRESHOLD_get();
  public final static native long ConfigKey_CLOCK_EDGE_get();
  public final static native long ConfigKey_AMPLITUDE_get();
  public final static native long ConfigKey_REGULATION_get();
  public final static native long ConfigKey_OVER_TEMPERATURE_PROTECTION_get();
  public final static native long ConfigKey_OUTPUT_FREQUENCY_get();
  public final static native long ConfigKey_OUTPUT_FREQUENCY_TARGET_get();
  public final static native long ConfigKey_MEASURED_QUANTITY_get();
  public final static native long ConfigKey_EQUIV_CIRCUIT_MODEL_get();
  public final static native long ConfigKey_OVER_TEMPERATURE_PROTECTION_ACTIVE_get();
  public final static native long ConfigKey_UNDER_VOLTAGE_CONDITION_get();
  public final static native long ConfigKey_UNDER_VOLTAGE_CONDITION_ACTIVE_get();
  public final static native long ConfigKey_TRIGGER_LEVEL_get();
  public final static native long ConfigKey_UNDER_VOLTAGE_CONDITION_THRESHOLD_get();
  public final static native long ConfigKey_EXTERNAL_CLOCK_SOURCE_get();
  public final static native long ConfigKey_SESSIONFILE_get();
  public final static native long ConfigKey_CAPTUREFILE_get();
  public final static native long ConfigKey_CAPTURE_UNITSIZE_get();
  public final static native long ConfigKey_POWER_OFF_get();
  public final static native long ConfigKey_DATA_SOURCE_get();
  public final static native long ConfigKey_PROBE_FACTOR_get();
  public final static native long ConfigKey_ADC_POWERLINE_CYCLES_get();
  public final static native long ConfigKey_LIMIT_MSEC_get();
  public final static native long ConfigKey_LIMIT_SAMPLES_get();
  public final static native long ConfigKey_LIMIT_FRAMES_get();
  public final static native long ConfigKey_CONTINUOUS_get();
  public final static native long ConfigKey_DATALOG_get();
  public final static native long ConfigKey_DEVICE_MODE_get();
  public final static native long ConfigKey_TEST_MODE_get();
  public final static native long ConfigKey_data_type(long jarg1, ConfigKey jarg1_);
  public final static native String ConfigKey_identifier(long jarg1, ConfigKey jarg1_);
  public final static native String ConfigKey_description(long jarg1, ConfigKey jarg1_);
  public final static native long ConfigKey_get_by_identifier(String jarg1);
  public final static native long ConfigKey_parse_string__SWIG_0(String jarg1, int jarg2);
  public final static native long ConfigKey_parse_string__SWIG_1(long jarg1, ConfigKey jarg1_, String jarg2);
  public final static native void delete_ConfigKey(long jarg1);
  public final static native long Driver_SWIGSmartPtrUpcast(long jarg1);
  public final static native long Device_SWIGSmartPtrUpcast(long jarg1);
  public final static native long HardwareDevice_SWIGSmartPtrUpcast(long jarg1);
  public final static native long UserDevice_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ChannelGroup_SWIGSmartPtrUpcast(long jarg1);
  public final static native long SessionDevice_SWIGSmartPtrUpcast(long jarg1);
  public final static native long Header_SWIGSmartPtrUpcast(long jarg1);
  public final static native long Meta_SWIGSmartPtrUpcast(long jarg1);
  public final static native long Logic_SWIGSmartPtrUpcast(long jarg1);
  public final static native long Analog_SWIGSmartPtrUpcast(long jarg1);
  public final static native long InputDevice_SWIGSmartPtrUpcast(long jarg1);
  public final static native long LogLevel_SWIGUpcast(long jarg1);
  public final static native long DataType_SWIGUpcast(long jarg1);
  public final static native long PacketType_SWIGUpcast(long jarg1);
  public final static native long Quantity_SWIGUpcast(long jarg1);
  public final static native long Unit_SWIGUpcast(long jarg1);
  public final static native long QuantityFlag_SWIGUpcast(long jarg1);
  public final static native long TriggerMatchType_SWIGUpcast(long jarg1);
  public final static native long OutputFlag_SWIGUpcast(long jarg1);
  public final static native long ChannelType_SWIGUpcast(long jarg1);
  public final static native long Capability_SWIGUpcast(long jarg1);
  public final static native long ConfigKey_SWIGUpcast(long jarg1);
}
