/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sigrok.core.classes;

/** Unit of measurement. */
public class Unit extends EnumValueUnit {
  protected transient long swigCPtr;

  protected Unit(long cPtr, boolean cMemoryOwn) {
    super(classesJNI.Unit_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Unit obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        classesJNI.delete_Unit(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** Volt. */
  public static final Unit VOLT = new Unit(classesJNI.Unit_VOLT_get(), false);

  /** Ampere (current). */
  public static final Unit AMPERE = new Unit(classesJNI.Unit_AMPERE_get(), false);

  /** Ohm (resistance). */
  public static final Unit OHM = new Unit(classesJNI.Unit_OHM_get(), false);

  /** Farad (capacity). */
  public static final Unit FARAD = new Unit(classesJNI.Unit_FARAD_get(), false);

  /** Kelvin (temperature). */
  public static final Unit KELVIN = new Unit(classesJNI.Unit_KELVIN_get(), false);

  /** Degrees Celsius (temperature). */
  public static final Unit CELSIUS = new Unit(classesJNI.Unit_CELSIUS_get(), false);

  /** Degrees Fahrenheit (temperature). */
  public static final Unit FAHRENHEIT = new Unit(classesJNI.Unit_FAHRENHEIT_get(), false);

  /** Hertz (frequency, 1/s, [Hz]). */
  public static final Unit HERTZ = new Unit(classesJNI.Unit_HERTZ_get(), false);

  /** Percent value. */
  public static final Unit PERCENTAGE = new Unit(classesJNI.Unit_PERCENTAGE_get(), false);

  /** Boolean value. */
  public static final Unit BOOLEAN = new Unit(classesJNI.Unit_BOOLEAN_get(), false);

  /** Time in seconds. */
  public static final Unit SECOND = new Unit(classesJNI.Unit_SECOND_get(), false);

  /** Unit of conductance, the inverse of resistance. */
  public static final Unit SIEMENS = new Unit(classesJNI.Unit_SIEMENS_get(), false);

  /** An absolute measurement of power, in decibels, referenced to 1 milliwatt (dBm). */
  public static final Unit DECIBEL_MW = new Unit(classesJNI.Unit_DECIBEL_MW_get(), false);

  /** Voltage in decibel, referenced to 1 volt (dBV). */
  public static final Unit DECIBEL_VOLT = new Unit(classesJNI.Unit_DECIBEL_VOLT_get(), false);

  /** Measurements that intrinsically do not have units attached, such as ratios, gains, etc. */
  public static final Unit UNITLESS = new Unit(classesJNI.Unit_UNITLESS_get(), false);

  /** Sound pressure level, in decibels, relative to 20 micropascals. */
  public static final Unit DECIBEL_SPL = new Unit(classesJNI.Unit_DECIBEL_SPL_get(), false);

  /** Normalized (0 to 1) concentration of a substance or compound with 0 representing a concentration of 0%, and 1 being 100%. */
  public static final Unit CONCENTRATION = new Unit(classesJNI.Unit_CONCENTRATION_get(), false);

  /** Revolutions per minute. */
  public static final Unit REVOLUTIONS_PER_MINUTE = new Unit(classesJNI.Unit_REVOLUTIONS_PER_MINUTE_get(), false);

  /** Apparent power [VA]. */
  public static final Unit VOLT_AMPERE = new Unit(classesJNI.Unit_VOLT_AMPERE_get(), false);

  /** Real power [W]. */
  public static final Unit WATT = new Unit(classesJNI.Unit_WATT_get(), false);

  /** Consumption [Wh]. */
  public static final Unit WATT_HOUR = new Unit(classesJNI.Unit_WATT_HOUR_get(), false);

  /** Wind speed in meters per second. */
  public static final Unit METER_SECOND = new Unit(classesJNI.Unit_METER_SECOND_get(), false);

  /** Pressure in hectopascal. */
  public static final Unit HECTOPASCAL = new Unit(classesJNI.Unit_HECTOPASCAL_get(), false);

  /** Relative humidity assuming air temperature of 293 Kelvin (rF). */
  public static final Unit HUMIDITY_293K = new Unit(classesJNI.Unit_HUMIDITY_293K_get(), false);

  /** Plane angle in 1/360th of a full circle. */
  public static final Unit DEGREE = new Unit(classesJNI.Unit_DEGREE_get(), false);

  /** Henry (inductance). */
  public static final Unit HENRY = new Unit(classesJNI.Unit_HENRY_get(), false);

  /** Mass in gram [g]. */
  public static final Unit GRAM = new Unit(classesJNI.Unit_GRAM_get(), false);

  /** Mass in carat [ct]. */
  public static final Unit CARAT = new Unit(classesJNI.Unit_CARAT_get(), false);

  /** Mass in ounce [oz]. */
  public static final Unit OUNCE = new Unit(classesJNI.Unit_OUNCE_get(), false);

  /** Mass in troy ounce [oz t]. */
  public static final Unit TROY_OUNCE = new Unit(classesJNI.Unit_TROY_OUNCE_get(), false);

  /** Mass in pound [lb]. */
  public static final Unit POUND = new Unit(classesJNI.Unit_POUND_get(), false);

  /** Mass in pennyweight [dwt]. */
  public static final Unit PENNYWEIGHT = new Unit(classesJNI.Unit_PENNYWEIGHT_get(), false);

  /** Mass in grain [gr]. */
  public static final Unit GRAIN = new Unit(classesJNI.Unit_GRAIN_get(), false);

  /** Mass in tael (variants: Hong Kong, Singapore/Malaysia, Taiwan) */
  public static final Unit TAEL = new Unit(classesJNI.Unit_TAEL_get(), false);

  /** Mass in momme. */
  public static final Unit MOMME = new Unit(classesJNI.Unit_MOMME_get(), false);

  /** Mass in tola. */
  public static final Unit TOLA = new Unit(classesJNI.Unit_TOLA_get(), false);

  /** Pieces (number of items). */
  public static final Unit PIECE = new Unit(classesJNI.Unit_PIECE_get(), false);


  public static Unit getVOLT() {
    long cPtr = classesJNI.Unit_VOLT_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getAMPERE() {
    long cPtr = classesJNI.Unit_AMPERE_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getOHM() {
    long cPtr = classesJNI.Unit_OHM_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getFARAD() {
    long cPtr = classesJNI.Unit_FARAD_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getKELVIN() {
    long cPtr = classesJNI.Unit_KELVIN_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getCELSIUS() {
    long cPtr = classesJNI.Unit_CELSIUS_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getFAHRENHEIT() {
    long cPtr = classesJNI.Unit_FAHRENHEIT_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getHERTZ() {
    long cPtr = classesJNI.Unit_HERTZ_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getPERCENTAGE() {
    long cPtr = classesJNI.Unit_PERCENTAGE_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getBOOLEAN() {
    long cPtr = classesJNI.Unit_BOOLEAN_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getSECOND() {
    long cPtr = classesJNI.Unit_SECOND_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getSIEMENS() {
    long cPtr = classesJNI.Unit_SIEMENS_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getDECIBEL_MW() {
    long cPtr = classesJNI.Unit_DECIBEL_MW_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getDECIBEL_VOLT() {
    long cPtr = classesJNI.Unit_DECIBEL_VOLT_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getUNITLESS() {
    long cPtr = classesJNI.Unit_UNITLESS_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getDECIBEL_SPL() {
    long cPtr = classesJNI.Unit_DECIBEL_SPL_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getCONCENTRATION() {
    long cPtr = classesJNI.Unit_CONCENTRATION_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getREVOLUTIONS_PER_MINUTE() {
    long cPtr = classesJNI.Unit_REVOLUTIONS_PER_MINUTE_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getVOLT_AMPERE() {
    long cPtr = classesJNI.Unit_VOLT_AMPERE_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getWATT() {
    long cPtr = classesJNI.Unit_WATT_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getWATT_HOUR() {
    long cPtr = classesJNI.Unit_WATT_HOUR_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getMETER_SECOND() {
    long cPtr = classesJNI.Unit_METER_SECOND_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getHECTOPASCAL() {
    long cPtr = classesJNI.Unit_HECTOPASCAL_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getHUMIDITY_293K() {
    long cPtr = classesJNI.Unit_HUMIDITY_293K_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getDEGREE() {
    long cPtr = classesJNI.Unit_DEGREE_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getHENRY() {
    long cPtr = classesJNI.Unit_HENRY_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getGRAM() {
    long cPtr = classesJNI.Unit_GRAM_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getCARAT() {
    long cPtr = classesJNI.Unit_CARAT_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getOUNCE() {
    long cPtr = classesJNI.Unit_OUNCE_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getTROY_OUNCE() {
    long cPtr = classesJNI.Unit_TROY_OUNCE_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getPOUND() {
    long cPtr = classesJNI.Unit_POUND_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getPENNYWEIGHT() {
    long cPtr = classesJNI.Unit_PENNYWEIGHT_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getGRAIN() {
    long cPtr = classesJNI.Unit_GRAIN_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getTAEL() {
    long cPtr = classesJNI.Unit_TAEL_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getMOMME() {
    long cPtr = classesJNI.Unit_MOMME_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getTOLA() {
    long cPtr = classesJNI.Unit_TOLA_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

  public static Unit getPIECE() {
    long cPtr = classesJNI.Unit_PIECE_get();
    return (cPtr == 0) ? null : new Unit(cPtr, false);
  }

}
