/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sigrok.core.classes;

/** An object that can be configured. */
public class Configurable {
  protected transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Configurable(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Configurable obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        classesJNI.delete_Configurable(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /** Supported configuration keys. */
public ConfigSet config_keys() {
    return new ConfigSet(classesJNI.Configurable_config_keys(swigCPtr, this), true);
  }

  /** Read configuration for the given key.
   * @param key ConfigKey to read. */
public Variant config_get(ConfigKey key) {
    return new Variant(classesJNI.Configurable_config_get(swigCPtr, this, ConfigKey.getCPtr(key), key), true);
  }

  /** Set configuration for the given key to a specified value.
   * @param value Value to set.
   * @param key ConfigKey to set. */
public void config_set(ConfigKey key, Variant value) {
    classesJNI.Configurable_config_set(swigCPtr, this, ConfigKey.getCPtr(key), key, Variant.getCPtr(value), value);
  }

  /** Enumerate available values for the given configuration key.
   * @param key ConfigKey to enumerate values for. */
public SWIGTYPE_p_Glib__VariantContainerBase config_list(ConfigKey key) {
    return new SWIGTYPE_p_Glib__VariantContainerBase(classesJNI.Configurable_config_list(swigCPtr, this, ConfigKey.getCPtr(key), key), true);
  }

  /** Enumerate configuration capabilities for the given configuration key.
   * @param key ConfigKey to enumerate capabilities for. */
public CapabilitySet config_capabilities(ConfigKey key) {
    return new CapabilitySet(classesJNI.Configurable_config_capabilities(swigCPtr, this, ConfigKey.getCPtr(key), key), true);
  }

  /** Check whether a configuration capability is supported for a given key.
   * @param capability Capability to check for.
   * @param key ConfigKey to check. */
public boolean config_check(ConfigKey key, Capability capability) {
    return classesJNI.Configurable_config_check(swigCPtr, this, ConfigKey.getCPtr(key), key, Capability.getCPtr(capability), capability);
  }

}
