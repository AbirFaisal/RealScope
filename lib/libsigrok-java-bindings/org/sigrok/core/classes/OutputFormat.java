/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sigrok.core.classes;

/** An output format supported by the library. */
public class OutputFormat {
  protected transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected OutputFormat(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OutputFormat obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        classesJNI.delete_OutputFormat(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /** Name of this output format. */
public String name() {
    return classesJNI.OutputFormat_name(swigCPtr, this);
  }

  /** Description of this output format. */
public String description() {
    return classesJNI.OutputFormat_description(swigCPtr, this);
  }

  /** A list of preferred file name extensions for this file format. */
public SWIGTYPE_p_std__vectorT_std__string_t extensions() {
    return new SWIGTYPE_p_std__vectorT_std__string_t(classesJNI.OutputFormat_extensions(swigCPtr, this), true);
  }

  /** Options supported by this output format. */
public OptionMap options() {
    return new OptionMap(classesJNI.OutputFormat_options(swigCPtr, this), true);
  }

  /** Create an output using this format.
   * @param device Device to output for.
   * @param options Mapping of (option name, value) pairs.
   * @param filename Name of destination file. */
public Output create_output(Device device, VariantMap options) {
    long cPtr = classesJNI.OutputFormat_create_output__SWIG_0(swigCPtr, this, Device.getCPtr(device), device, VariantMap.getCPtr(options), options);
    return (cPtr == 0) ? null : new Output(cPtr, true);
  }

  /** Create an output using this format.
   * @param device Device to output for.
   * @param options Mapping of (option name, value) pairs.
   * @param filename Name of destination file. */
public Output create_output(Device device) {
    long cPtr = classesJNI.OutputFormat_create_output__SWIG_1(swigCPtr, this, Device.getCPtr(device), device);
    return (cPtr == 0) ? null : new Output(cPtr, true);
  }

  /** Create an output using this format.
   * @param device Device to output for.
   * @param options Mapping of (option name, value) pairs.
   * @param filename Name of destination file. */
public Output create_output(String filename, Device device, VariantMap options) {
    long cPtr = classesJNI.OutputFormat_create_output__SWIG_2(swigCPtr, this, filename, Device.getCPtr(device), device, VariantMap.getCPtr(options), options);
    return (cPtr == 0) ? null : new Output(cPtr, true);
  }

  /** Create an output using this format.
   * @param device Device to output for.
   * @param options Mapping of (option name, value) pairs.
   * @param filename Name of destination file. */
public Output create_output(String filename, Device device) {
    long cPtr = classesJNI.OutputFormat_create_output__SWIG_3(swigCPtr, this, filename, Device.getCPtr(device), device);
    return (cPtr == 0) ? null : new Output(cPtr, true);
  }

  /** Checks whether a given flag is set.
   * @param flag Flag to check */
public boolean test_flag(OutputFlag flag) {
    return classesJNI.OutputFormat_test_flag(swigCPtr, this, OutputFlag.getCPtr(flag), flag);
  }

}
